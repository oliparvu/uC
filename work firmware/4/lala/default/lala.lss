
lala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000242  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005c  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000046b  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000180  00000000  00000000  000007a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003d0  00000000  00000000  00000927  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e6  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000150  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  7a:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_init>:
return 1;
}
 
unsigned int LCD_init()
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
  82:	88 e3       	ldi	r24, 0x38	; 56
  84:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  86:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  88:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  8a:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  8c:	90 98       	cbi	0x12, 0	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	24 ef       	ldi	r18, 0xF4	; 244
  90:	31 e0       	ldi	r19, 0x01	; 1
  92:	c9 01       	movw	r24, r18
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_init+0x12>
 
unsigned int LCD_init()
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
  98:	8e e0       	ldi	r24, 0x0E	; 14
  9a:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  9c:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  9e:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  a0:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  a2:	90 98       	cbi	0x12, 0	; 18
  a4:	c9 01       	movw	r24, r18
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_init+0x24>
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  ae:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  b0:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  b2:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  b4:	90 98       	cbi	0x12, 0	; 18
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_init+0x36>
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
    wrcomm();                              //Scrie comanda
    dataport = 0x01;                    //Cursor la linia 1, col 1
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  c0:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  c2:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  c4:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  c6:	90 98       	cbi	0x12, 0	; 18
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_init+0x48>
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
    wrcomm();                              //Scrie comanda
    dataport = 0x01;                    //Cursor la linia 1, col 1
    wrcomm();                              //Scrie comanda
    dataport = 0x80;                   //Fara shipt
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  d2:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  d4:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  d6:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  d8:	90 98       	cbi	0x12, 0	; 18
  da:	c9 01       	movw	r24, r18
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_init+0x5a>
    dataport = 0x01;                    //Cursor la linia 1, col 1
    wrcomm();                              //Scrie comanda
    dataport = 0x80;                   //Fara shipt
    wrcomm();                              //Scrie comanda
return 1;
}
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	08 95       	ret

000000e6 <LCD_SendData>:

unsigned int LCD_SendData (void)
{unsigned char l1[]="        ";
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	29 97       	sbiw	r28, 0x09	; 9
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
    _delay_ms(2) ;                                      //10ms delay
    return 1;
}  

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  fe:	83 e4       	ldi	r24, 0x43	; 67
 100:	87 b9       	out	0x07, r24	; 7
  //ADMUX=( (1<< MUX0) | (0 << REFS1) | (1 << REFS0) | (0 << ADLAR) ); //Canal 1, Referinta AVCC, Aliniere la dreapta
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
 102:	8e ec       	ldi	r24, 0xCE	; 206
 104:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
 106:	34 9b       	sbis	0x06, 4	; 6
 108:	fe cf       	rjmp	.-4      	; 0x106 <LCD_SendData+0x20>
    wrcomm();                              //Scrie comanda
return 1;
}

unsigned int LCD_SendData (void)
{unsigned char l1[]="        ";
 10a:	de 01       	movw	r26, r28
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	e0 e6       	ldi	r30, 0x60	; 96
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	89 e0       	ldi	r24, 0x09	; 9
 114:	01 90       	ld	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	e1 f7       	brne	.-8      	; 0x114 <LCD_SendData+0x2e>
unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  //ADMUX=( (1<< MUX0) | (0 << REFS1) | (1 << REFS0) | (0 << ADLAR) ); //Canal 1, Referinta AVCC, Aliniere la dreapta
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  ADCSRA|=0x10;
 11c:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 11e:	24 b1       	in	r18, 0x04	; 4
 120:	35 b1       	in	r19, 0x05	; 5
 unsigned int val,i;
 
val=read_adc(adc3);

//val=val*(501/100);
val=val*49;
 122:	81 e3       	ldi	r24, 0x31	; 49
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	28 9f       	mul	r18, r24
 128:	f0 01       	movw	r30, r0
 12a:	29 9f       	mul	r18, r25
 12c:	f0 0d       	add	r31, r0
 12e:	38 9f       	mul	r19, r24
 130:	f0 0d       	add	r31, r0
 132:	11 24       	eor	r1, r1
 134:	8e 01       	movw	r16, r28
 136:	0a 5f       	subi	r16, 0xFA	; 250
 138:	1f 4f       	sbci	r17, 0xFF	; 255
 13a:	0f c0       	rjmp	.+30     	; 0x15a <LCD_SendData+0x74>

i=5;
while(val)
	{
	l1[i]=val%10;
 13c:	cf 01       	movw	r24, r30
 13e:	6a e0       	ldi	r22, 0x0A	; 10
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 0b 01 	call	0x216	; 0x216 <__udivmodhi4>
 146:	d8 01       	movw	r26, r16
 148:	8c 93       	st	X, r24
	val=val/10;
 14a:	cf 01       	movw	r24, r30
 14c:	6a e0       	ldi	r22, 0x0A	; 10
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	0e 94 0b 01 	call	0x216	; 0x216 <__udivmodhi4>
 154:	fb 01       	movw	r30, r22
 156:	01 50       	subi	r16, 0x01	; 1
 158:	10 40       	sbci	r17, 0x00	; 0

//val=val*(501/100);
val=val*49;

i=5;
while(val)
 15a:	30 97       	sbiw	r30, 0x00	; 0
 15c:	79 f7       	brne	.-34     	; 0x13c <LCD_SendData+0x56>





dataport= 0x01;					   //Cursor la linia 1 coloana 1
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 162:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 164:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 166:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 168:	90 98       	cbi	0x12, 0	; 18
 16a:	84 ef       	ldi	r24, 0xF4	; 244
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_SendData+0x88>
 172:	fe 01       	movw	r30, r28
 174:	31 96       	adiw	r30, 0x01	; 1


dataport= 0x01;					   //Cursor la linia 1 coloana 1
wrcomm();

for (i=0;i<5;i++)
 176:	44 ef       	ldi	r20, 0xF4	; 244
 178:	51 e0       	ldi	r21, 0x01	; 1
 17a:	9e 01       	movw	r18, r28
 17c:	2a 5f       	subi	r18, 0xFA	; 250
 17e:	3f 4f       	sbci	r19, 0xFF	; 255
{
dataport = 48+l1[i];
 180:	81 91       	ld	r24, Z+
 182:	80 5d       	subi	r24, 0xD0	; 208
 184:	85 bb       	out	0x15, r24	; 21
    return 1;
}

unsigned int wrdata(void)
{
    commport |= (1 << rs);                            //Setting RS = 1, selecting data register
 186:	92 9a       	sbi	0x12, 2	; 18
    commport &= ~(1 << wr);                      //Setting RW = 0
 188:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                           //EN = 1
 18a:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                      //EN = 0, thus giving high to low pulse on Enable pin
 18c:	90 98       	cbi	0x12, 0	; 18
 18e:	ca 01       	movw	r24, r20
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_SendData+0xaa>


dataport= 0x01;					   //Cursor la linia 1 coloana 1
wrcomm();

for (i=0;i<5;i++)
 194:	e2 17       	cp	r30, r18
 196:	f3 07       	cpc	r31, r19
 198:	99 f7       	brne	.-26     	; 0x180 <LCD_SendData+0x9a>
//dataport = 0xC0;                //Cursoar la linia 2 coloana 1
//wrcomm();



 return 1;}
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	29 96       	adiw	r28, 0x09	; 9
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	cf 91       	pop	r28
 1ac:	df 91       	pop	r29
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <main>:
unsigned int read_adc();



int main(void)
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	DDRA = 0x00;							 //PortA in
 1b8:	1a ba       	out	0x1a, r1	; 26
    DDRC = 0xFF;                             //PortC out
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	84 bb       	out	0x14, r24	; 20
    DDRD = 0x07;                             //PortD 0, 1, 2 pin out
 1be:	87 e0       	ldi	r24, 0x07	; 7
 1c0:	81 bb       	out	0x11, r24	; 17
	LCD_init(); 							 //Initializare LCD
 1c2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_init>
 1c6:	c8 ea       	ldi	r28, 0xA8	; 168
 1c8:	d1 e6       	ldi	r29, 0x61	; 97
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x18>
while(1)
{_delay_ms(100);
    LCD_SendData();                      //Afisare
 1d0:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_SendData>
 1d4:	fa cf       	rjmp	.-12     	; 0x1ca <main+0x16>

000001d6 <wrcomm>:

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 1d6:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 1d8:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 1da:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 1dc:	90 98       	cbi	0x12, 0	; 18
 1de:	84 ef       	ldi	r24, 0xF4	; 244
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <wrcomm+0xc>
    _delay_ms(2);                                            //10ms delay
    return 1;
}
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	08 95       	ret

000001ec <wrdata>:

unsigned int wrdata(void)
{
    commport |= (1 << rs);                            //Setting RS = 1, selecting data register
 1ec:	92 9a       	sbi	0x12, 2	; 18
    commport &= ~(1 << wr);                      //Setting RW = 0
 1ee:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                           //EN = 1
 1f0:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                      //EN = 0, thus giving high to low pulse on Enable pin
 1f2:	90 98       	cbi	0x12, 0	; 18
 1f4:	84 ef       	ldi	r24, 0xF4	; 244
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <wrdata+0xc>
    _delay_ms(2) ;                                      //10ms delay
    return 1;
}  
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	08 95       	ret

00000202 <read_adc>:

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
 202:	87 b9       	out	0x07, r24	; 7
  //ADMUX=( (1<< MUX0) | (0 << REFS1) | (1 << REFS0) | (0 << ADLAR) ); //Canal 1, Referinta AVCC, Aliniere la dreapta
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
 204:	8e ec       	ldi	r24, 0xCE	; 206
 206:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
 208:	34 9b       	sbis	0x06, 4	; 6
 20a:	fe cf       	rjmp	.-4      	; 0x208 <read_adc+0x6>
  ADCSRA|=0x10;
 20c:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 20e:	24 b1       	in	r18, 0x04	; 4
 210:	35 b1       	in	r19, 0x05	; 5
}
 212:	c9 01       	movw	r24, r18
 214:	08 95       	ret

00000216 <__udivmodhi4>:
 216:	aa 1b       	sub	r26, r26
 218:	bb 1b       	sub	r27, r27
 21a:	51 e1       	ldi	r21, 0x11	; 17
 21c:	07 c0       	rjmp	.+14     	; 0x22c <__udivmodhi4_ep>

0000021e <__udivmodhi4_loop>:
 21e:	aa 1f       	adc	r26, r26
 220:	bb 1f       	adc	r27, r27
 222:	a6 17       	cp	r26, r22
 224:	b7 07       	cpc	r27, r23
 226:	10 f0       	brcs	.+4      	; 0x22c <__udivmodhi4_ep>
 228:	a6 1b       	sub	r26, r22
 22a:	b7 0b       	sbc	r27, r23

0000022c <__udivmodhi4_ep>:
 22c:	88 1f       	adc	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	5a 95       	dec	r21
 232:	a9 f7       	brne	.-22     	; 0x21e <__udivmodhi4_loop>
 234:	80 95       	com	r24
 236:	90 95       	com	r25
 238:	bc 01       	movw	r22, r24
 23a:	cd 01       	movw	r24, r26
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
