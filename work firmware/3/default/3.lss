
3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000004e0  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  0000057c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000195  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001235  00000000  00000000  00000751  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000320  00000000  00000000  00001986  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b0e  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f1  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000466  00000000  00000000  00002b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  00002f8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  8a:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <read_adc>:



unsigned int read_adc(unsigned int channel)
{	
  ADMUX=channel;
  92:	87 b9       	out	0x07, r24	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  94:	8e ec       	ldi	r24, 0xCE	; 206
  96:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  98:	34 9b       	sbis	0x06, 4	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <read_adc+0x6>
  ADCSRA|=0x10;
  9c:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  9e:	24 b1       	in	r18, 0x04	; 4
  a0:	35 b1       	in	r19, 0x05	; 5
}
  a2:	c9 01       	movw	r24, r18
  a4:	08 95       	ret

000000a6 <mean>:



unsigned int read_adc(unsigned int channel)
{	
  ADMUX=channel;
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	87 b9       	out	0x07, r24	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  aa:	8e ec       	ldi	r24, 0xCE	; 206
  ac:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <mean+0x8>
  ADCSRA|=0x10;
  b2:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	95 b1       	in	r25, 0x05	; 5
}


unsigned int mean()					//Citeste 3 valori ale tensiunii la intervale de 100ms si face media
{
 v1=read_adc(adc1);
  b8:	80 93 68 00 	sts	0x0068, r24
  bc:	88 eb       	ldi	r24, 0xB8	; 184
  be:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	29 e1       	ldi	r18, 0x19	; 25
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <mean+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  cc:	d9 f7       	brne	.-10     	; 0xc4 <mean+0x1e>



unsigned int read_adc(unsigned int channel)
{	
  ADMUX=channel;
  ce:	81 e4       	ldi	r24, 0x41	; 65
  d0:	87 b9       	out	0x07, r24	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  d2:	8e ec       	ldi	r24, 0xCE	; 206
  d4:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  d6:	34 9b       	sbis	0x06, 4	; 6
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <mean+0x30>
  ADCSRA|=0x10;
  da:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	95 b1       	in	r25, 0x05	; 5

unsigned int mean()					//Citeste 3 valori ale tensiunii la intervale de 100ms si face media
{
 v1=read_adc(adc1);
 _delay_ms(300);
 v2=read_adc(adc1);
  e0:	80 93 6b 00 	sts	0x006B, r24
  e4:	88 eb       	ldi	r24, 0xB8	; 184
  e6:	9b e0       	ldi	r25, 0x0B	; 11
  e8:	29 e1       	ldi	r18, 0x19	; 25
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <mean+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f4:	d9 f7       	brne	.-10     	; 0xec <mean+0x46>



unsigned int read_adc(unsigned int channel)
{	
  ADMUX=channel;
  f6:	81 e4       	ldi	r24, 0x41	; 65
  f8:	87 b9       	out	0x07, r24	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  fa:	8e ec       	ldi	r24, 0xCE	; 206
  fc:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  fe:	34 9b       	sbis	0x06, 4	; 6
 100:	fe cf       	rjmp	.-4      	; 0xfe <mean+0x58>
  ADCSRA|=0x10;
 102:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 104:	84 b1       	in	r24, 0x04	; 4
 106:	95 b1       	in	r25, 0x05	; 5
{
 v1=read_adc(adc1);
 _delay_ms(300);
 v2=read_adc(adc1);
 _delay_ms(300);
 v3=read_adc(adc1);
 108:	80 93 69 00 	sts	0x0069, r24
 val=(v1+v2+v3)/3;
val*=503/1024;						//Vin(mV)=(ADCW*Vref[V])/10.24
 10c:	10 92 6a 00 	sts	0x006A, r1
return val;
}
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret

00000116 <process>:

unsigned int process()
{

 unsigned int u;
 u=(mean(adc1)*3)/10;
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 53 00 	call	0xa6	; 0xa6 <mean>
 11e:	9c 01       	movw	r18, r24
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	6a e0       	ldi	r22, 0x0A	; 10
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__udivmodhi4>
 130:	46 2f       	mov	r20, r22
 132:	e7 2f       	mov	r30, r23

 if(((u/100)%1000)==0x0001) 		//Mascarea primului 0
 134:	86 2f       	mov	r24, r22
 136:	97 2f       	mov	r25, r23
 138:	64 e6       	ldi	r22, 0x64	; 100
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__udivmodhi4>
 140:	cb 01       	movw	r24, r22
 142:	68 ee       	ldi	r22, 0xE8	; 232
 144:	73 e0       	ldi	r23, 0x03	; 3
 146:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__udivmodhi4>
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	11 f4       	brne	.+4      	; 0x152 <process+0x3c>
  	l1[2]=(u/100)%1000+48;
 14e:	81 e3       	ldi	r24, 0x31	; 49
 150:	01 c0       	rjmp	.+2      	; 0x154 <process+0x3e>
 else
 	l1[2]=0x20;
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	80 93 62 00 	sts	0x0062, r24
 if((((u/10)%100)>=0x000A)&&(((u/10)%100)<0x000F))
 158:	84 2f       	mov	r24, r20
 15a:	9e 2f       	mov	r25, r30
 15c:	6a e0       	ldi	r22, 0x0A	; 10
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__udivmodhi4>
 164:	cb 01       	movw	r24, r22
 166:	64 e6       	ldi	r22, 0x64	; 100
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__udivmodhi4>
 16e:	9c 01       	movw	r18, r24
 170:	0a 97       	sbiw	r24, 0x0a	; 10
 172:	05 97       	sbiw	r24, 0x05	; 5
 174:	60 f4       	brcc	.+24     	; 0x18e <process+0x78>
 {
	l1[3]=(u/10)%100+38;
 176:	82 2f       	mov	r24, r18
 178:	8a 5d       	subi	r24, 0xDA	; 218
 17a:	80 93 63 00 	sts	0x0063, r24
	l1[5]=(u)%10+47;
 17e:	84 2f       	mov	r24, r20
 180:	9e 2f       	mov	r25, r30
 182:	6a e0       	ldi	r22, 0x0A	; 10
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__udivmodhi4>
 18a:	81 5d       	subi	r24, 0xD1	; 209
 18c:	10 c0       	rjmp	.+32     	; 0x1ae <process+0x98>
 }
 	else
		if (((u/10)%100)==0x000F)
 18e:	2f 30       	cpi	r18, 0x0F	; 15
 190:	31 05       	cpc	r19, r1
 192:	11 f4       	brne	.+4      	; 0x198 <process+0x82>
		{ 	l1[3]=(u/10)%100+38;
 194:	85 e3       	ldi	r24, 0x35	; 53
 196:	02 c0       	rjmp	.+4      	; 0x19c <process+0x86>
			l1[5]=(u)%10+48;
		}
			else
			{	l1[3]=(u/10)%100+48;
 198:	82 2f       	mov	r24, r18
 19a:	80 5d       	subi	r24, 0xD0	; 208
 19c:	80 93 63 00 	sts	0x0063, r24
				l1[5]=(u)%10+48;
 1a0:	84 2f       	mov	r24, r20
 1a2:	9e 2f       	mov	r25, r30
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__udivmodhi4>
 1ac:	80 5d       	subi	r24, 0xD0	; 208
 1ae:	80 93 65 00 	sts	0x0065, r24
			}
return 1;
}
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	08 95       	ret

000001b8 <main>:
unsigned int read_adc(unsigned int channel);
unsigned char v1,v2,v3,val;
unsigned char l1[]="U=  . V";

int main(void)
{DDRA = 0x00;
 1b8:	1a ba       	out	0x1a, r1	; 26
LCDinit();
 1ba:	0e 94 03 01 	call	0x206	; 0x206 <LCDinit>
LCDclr();
 1be:	0e 94 43 01 	call	0x286	; 0x286 <LCDclr>
LCDhome();
 1c2:	0e 94 4f 01 	call	0x29e	; 0x29e <LCDhome>

while(1)
{process();
 1c6:	0e 94 8b 00 	call	0x116	; 0x116 <process>
LCDstring(l1,7);
 1ca:	80 e6       	ldi	r24, 0x60	; 96
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	67 e0       	ldi	r22, 0x07	; 7
 1d0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCDstring>
 1d4:	f6 cf       	rjmp	.-20     	; 0x1c2 <main+0xa>

000001d6 <LCDsendChar>:
#include <util/delay.h>
#include <math.h>

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
	LDP=ch;
 1d6:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 1d8:	92 9a       	sbi	0x12, 2	; 18
	LCP|=1<<LCD_E;		
 1da:	90 9a       	sbi	0x12, 0	; 18
 1dc:	8a ef       	ldi	r24, 0xFA	; 250
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDsendChar+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 1e6:	90 98       	cbi	0x12, 0	; 18
	LCP&=~(1<<LCD_RS);
 1e8:	92 98       	cbi	0x12, 2	; 18
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCDsendChar+0x14>
	_delay_ms(1);
}
 1ee:	08 95       	ret

000001f0 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 1f0:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 1f2:	90 9a       	sbi	0x12, 0	; 18
 1f4:	8a ef       	ldi	r24, 0xFA	; 250
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fc 01       	movw	r30, r24
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDsendCommand+0xa>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 1fe:	90 98       	cbi	0x12, 0	; 18
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCDsendCommand+0x10>
	_delay_ms(1);	
}
 204:	08 95       	ret

00000206 <LCDinit>:
 206:	86 ea       	ldi	r24, 0xA6	; 166
 208:	9e e0       	ldi	r25, 0x0E	; 14
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCDinit+0x4>
void LCDinit(void)//Initializes LCD
{
	_delay_ms(15);
	LDP=0x00;
 20e:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 210:	12 ba       	out	0x12, r1	; 18
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
 212:	84 b3       	in	r24, 0x14	; 20
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	84 bb       	out	0x14, r24	; 20
			|1<<LCD_D2|1<<LCD_D1|1<<LCD_D0;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 218:	81 b3       	in	r24, 0x11	; 17
 21a:	87 60       	ori	r24, 0x07	; 7
 21c:	81 bb       	out	0x11, r24	; 17
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	85 bb       	out	0x15, r24	; 21
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 222:	90 9a       	sbi	0x12, 0	; 18
 224:	2a ef       	ldi	r18, 0xFA	; 250
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	f9 01       	movw	r30, r18
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCDinit+0x24>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 22e:	90 98       	cbi	0x12, 0	; 18
 230:	f9 01       	movw	r30, r18
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCDinit+0x2c>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 236:	85 bb       	out	0x15, r24	; 21
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 238:	90 9a       	sbi	0x12, 0	; 18
 23a:	f9 01       	movw	r30, r18
 23c:	31 97       	sbiw	r30, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCDinit+0x36>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 240:	90 98       	cbi	0x12, 0	; 18
 242:	f9 01       	movw	r30, r18
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCDinit+0x3e>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 248:	85 bb       	out	0x15, r24	; 21
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 24a:	90 9a       	sbi	0x12, 0	; 18
 24c:	c9 01       	movw	r24, r18
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCDinit+0x48>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 252:	90 98       	cbi	0x12, 0	; 18
 254:	c9 01       	movw	r24, r18
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCDinit+0x50>
	_delay_ms(1);
	//--------8 bit dual line----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
 25a:	88 e3       	ldi	r24, 0x38	; 56
 25c:	85 bb       	out	0x15, r24	; 21
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 25e:	90 9a       	sbi	0x12, 0	; 18
 260:	c9 01       	movw	r24, r18
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCDinit+0x5c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 266:	90 98       	cbi	0x12, 0	; 18
 268:	c9 01       	movw	r24, r18
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCDinit+0x64>
	_delay_ms(1);
   //-----increment address, cursor shift------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|1<<LCD_D3
 26e:	8e e0       	ldi	r24, 0x0E	; 14
 270:	85 bb       	out	0x15, r24	; 21
			|1<<LCD_D2|1<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 272:	90 9a       	sbi	0x12, 0	; 18
 274:	c9 01       	movw	r24, r18
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCDinit+0x70>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 27a:	90 98       	cbi	0x12, 0	; 18
 27c:	82 ee       	ldi	r24, 0xE2	; 226
 27e:	94 e0       	ldi	r25, 0x04	; 4
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCDinit+0x7a>
	_delay_ms(5);
}			
 284:	08 95       	ret

00000286 <LCDclr>:
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 28a:	90 9a       	sbi	0x12, 0	; 18
 28c:	8a ef       	ldi	r24, 0xFA	; 250
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	fc 01       	movw	r30, r24
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCDclr+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 296:	90 98       	cbi	0x12, 0	; 18
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCDclr+0x12>
	_delay_ms(5);
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
}
 29c:	08 95       	ret

0000029e <LCDhome>:
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 2a2:	90 9a       	sbi	0x12, 0	; 18
 2a4:	8a ef       	ldi	r24, 0xFA	; 250
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCDhome+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2ae:	90 98       	cbi	0x12, 0	; 18
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCDhome+0x12>
	LCDsendCommand(1<<LCD_CLR);
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
}
 2b4:	08 95       	ret

000002b6 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	a1 f0       	breq	.+40     	; 0x2e2 <LCDstring+0x2c>
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	4a ef       	ldi	r20, 0xFA	; 250
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 2c4:	81 91       	ld	r24, Z+
#include <util/delay.h>
#include <math.h>

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
	LDP=ch;
 2c6:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 2c8:	92 9a       	sbi	0x12, 2	; 18
	LCP|=1<<LCD_E;		
 2ca:	90 9a       	sbi	0x12, 0	; 18
 2cc:	ca 01       	movw	r24, r20
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCDstring+0x18>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 2d2:	90 98       	cbi	0x12, 0	; 18
	LCP&=~(1<<LCD_RS);
 2d4:	92 98       	cbi	0x12, 2	; 18
 2d6:	ca 01       	movw	r24, r20
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCDstring+0x22>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 2dc:	2f 5f       	subi	r18, 0xFF	; 255
 2de:	26 17       	cp	r18, r22
 2e0:	88 f3       	brcs	.-30     	; 0x2c4 <LCDstring+0xe>
 2e2:	08 95       	ret

000002e4 <LCDGotoXY>:
}
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 2e4:	62 30       	cpi	r22, 0x02	; 2
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <LCDGotoXY+0x10>
 2e8:	63 30       	cpi	r22, 0x03	; 3
 2ea:	31 f0       	breq	.+12     	; 0x2f8 <LCDGotoXY+0x14>
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	29 f4       	brne	.+10     	; 0x2fa <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 2f0:	80 5c       	subi	r24, 0xC0	; 192
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 2f4:	8c 5e       	subi	r24, 0xEC	; 236
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 2f8:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 2fa:	80 68       	ori	r24, 0x80	; 128
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 2fc:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 2fe:	90 9a       	sbi	0x12, 0	; 18
 300:	8a ef       	ldi	r24, 0xFA	; 250
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fc 01       	movw	r30, r24
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCDGotoXY+0x22>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 30a:	90 98       	cbi	0x12, 0	; 18
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <LCDGotoXY+0x28>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
	
}
 310:	08 95       	ret

00000312 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
 318:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 31a:	64 2f       	mov	r22, r20
 31c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCDGotoXY>
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	4a ef       	ldi	r20, 0xFA	; 250
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	0c c0       	rjmp	.+24     	; 0x340 <CopyStringtoLCD+0x2e>
#include <util/delay.h>
#include <math.h>

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
	LDP=ch;
 328:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 32a:	92 9a       	sbi	0x12, 2	; 18
	LCP|=1<<LCD_E;		
 32c:	90 9a       	sbi	0x12, 0	; 18
 32e:	ca 01       	movw	r24, r20
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <CopyStringtoLCD+0x1e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 334:	90 98       	cbi	0x12, 0	; 18
	LCP&=~(1<<LCD_RS);
 336:	92 98       	cbi	0x12, 2	; 18
 338:	ca 01       	movw	r24, r20
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <CopyStringtoLCD+0x28>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 33e:	2f 5f       	subi	r18, 0xFF	; 255
 340:	fe 01       	movw	r30, r28
 342:	e2 0f       	add	r30, r18
 344:	f1 1d       	adc	r31, r1
 346:	84 91       	lpm	r24, Z+
 348:	88 23       	and	r24, r24
 34a:	71 f7       	brne	.-36     	; 0x328 <CopyStringtoLCD+0x16>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 358:	66 0f       	add	r22, r22
 35a:	66 0f       	add	r22, r22
 35c:	66 0f       	add	r22, r22
 35e:	60 64       	ori	r22, 0x40	; 64
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	4a ef       	ldi	r20, 0xFA	; 250
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	86 2f       	mov	r24, r22
 36a:	82 0f       	add	r24, r18
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 36c:	fe 01       	movw	r30, r28
 36e:	e2 0f       	add	r30, r18
 370:	f3 1f       	adc	r31, r19
 372:	e4 91       	lpm	r30, Z+
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 374:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 376:	90 9a       	sbi	0x12, 0	; 18
 378:	da 01       	movw	r26, r20
 37a:	11 97       	sbiw	r26, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCDdefinechar+0x28>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 37e:	90 98       	cbi	0x12, 0	; 18
 380:	da 01       	movw	r26, r20
 382:	11 97       	sbiw	r26, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCDdefinechar+0x30>
#include <util/delay.h>
#include <math.h>

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
	LDP=ch;
 386:	e5 bb       	out	0x15, r30	; 21
	LCP|=1<<LCD_RS;
 388:	92 9a       	sbi	0x12, 2	; 18
	LCP|=1<<LCD_E;		
 38a:	90 9a       	sbi	0x12, 0	; 18
 38c:	fa 01       	movw	r30, r20
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCDdefinechar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 392:	90 98       	cbi	0x12, 0	; 18
	LCP&=~(1<<LCD_RS);
 394:	92 98       	cbi	0x12, 2	; 18
 396:	fa 01       	movw	r30, r20
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <LCDdefinechar+0x46>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 39c:	2f 5f       	subi	r18, 0xFF	; 255
 39e:	3f 4f       	sbci	r19, 0xFF	; 255
 3a0:	28 30       	cpi	r18, 0x08	; 8
 3a2:	31 05       	cpc	r19, r1
 3a4:	09 f7       	brne	.-62     	; 0x368 <LCDdefinechar+0x16>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 3ac:	90 e0       	ldi	r25, 0x00	; 0
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 3ae:	4e e1       	ldi	r20, 0x1E	; 30
 3b0:	2a ef       	ldi	r18, 0xFA	; 250
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	0a c0       	rjmp	.+20     	; 0x3ca <LCDshiftLeft+0x1e>
 3b6:	45 bb       	out	0x15, r20	; 21
	LCP|=1<<LCD_E;		
 3b8:	90 9a       	sbi	0x12, 0	; 18
 3ba:	f9 01       	movw	r30, r18
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCDshiftLeft+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 3c0:	90 98       	cbi	0x12, 0	; 18
 3c2:	f9 01       	movw	r30, r18
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCDshiftLeft+0x18>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
 3c8:	9f 5f       	subi	r25, 0xFF	; 255
 3ca:	98 17       	cp	r25, r24
 3cc:	a0 f3       	brcs	.-24     	; 0x3b6 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
 3ce:	08 95       	ret

000003d0 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 3d0:	90 e0       	ldi	r25, 0x00	; 0
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 3d2:	48 e1       	ldi	r20, 0x18	; 24
 3d4:	2a ef       	ldi	r18, 0xFA	; 250
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	0a c0       	rjmp	.+20     	; 0x3ee <LCDshiftRight+0x1e>
 3da:	45 bb       	out	0x15, r20	; 21
	LCP|=1<<LCD_E;		
 3dc:	90 9a       	sbi	0x12, 0	; 18
 3de:	f9 01       	movw	r30, r18
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCDshiftRight+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 3e4:	90 98       	cbi	0x12, 0	; 18
 3e6:	f9 01       	movw	r30, r18
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCDshiftRight+0x18>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
 3ec:	9f 5f       	subi	r25, 0xFF	; 255
 3ee:	98 17       	cp	r25, r24
 3f0:	a0 f3       	brcs	.-24     	; 0x3da <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
 3f2:	08 95       	ret

000003f4 <LCDcursorOn>:
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 3f4:	8e e0       	ldi	r24, 0x0E	; 14
 3f6:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 3f8:	90 9a       	sbi	0x12, 0	; 18
 3fa:	8a ef       	ldi	r24, 0xFA	; 250
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	fc 01       	movw	r30, r24
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <LCDcursorOn+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 404:	90 98       	cbi	0x12, 0	; 18
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <LCDcursorOn+0x12>
	}
}
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
}
 40a:	08 95       	ret

0000040c <LCDcursorOnBlink>:
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 40c:	8f e0       	ldi	r24, 0x0F	; 15
 40e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 410:	90 9a       	sbi	0x12, 0	; 18
 412:	8a ef       	ldi	r24, 0xFA	; 250
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	fc 01       	movw	r30, r24
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <LCDcursorOnBlink+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 41c:	90 98       	cbi	0x12, 0	; 18
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <LCDcursorOnBlink+0x12>
	LCDsendCommand(0x0E);
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
}
 422:	08 95       	ret

00000424 <LCDcursorOFF>:
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 424:	8c e0       	ldi	r24, 0x0C	; 12
 426:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 428:	90 9a       	sbi	0x12, 0	; 18
 42a:	8a ef       	ldi	r24, 0xFA	; 250
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	fc 01       	movw	r30, r24
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <LCDcursorOFF+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 434:	90 98       	cbi	0x12, 0	; 18
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <LCDcursorOFF+0x12>
	LCDsendCommand(0x0F);
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
}
 43a:	08 95       	ret

0000043c <LCDblank>:
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 43c:	88 e0       	ldi	r24, 0x08	; 8
 43e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 440:	90 9a       	sbi	0x12, 0	; 18
 442:	8a ef       	ldi	r24, 0xFA	; 250
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	fc 01       	movw	r30, r24
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <LCDblank+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 44c:	90 98       	cbi	0x12, 0	; 18
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <LCDblank+0x12>
	LCDsendCommand(0x0C);
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
}
 452:	08 95       	ret

00000454 <LCDvisible>:
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 454:	8c e0       	ldi	r24, 0x0C	; 12
 456:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 458:	90 9a       	sbi	0x12, 0	; 18
 45a:	8a ef       	ldi	r24, 0xFA	; 250
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	fc 01       	movw	r30, r24
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 464:	90 98       	cbi	0x12, 0	; 18
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__stack+0x7>
	LCDsendCommand(0x08);
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
}
 46a:	08 95       	ret

0000046c <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 46c:	90 e0       	ldi	r25, 0x00	; 0
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 46e:	40 e1       	ldi	r20, 0x10	; 16
 470:	2a ef       	ldi	r18, 0xFA	; 250
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	0a c0       	rjmp	.+20     	; 0x48a <LCDcursorLeft+0x1e>
 476:	45 bb       	out	0x15, r20	; 21
	LCP|=1<<LCD_E;		
 478:	90 9a       	sbi	0x12, 0	; 18
 47a:	f9 01       	movw	r30, r18
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <LCDcursorLeft+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 480:	90 98       	cbi	0x12, 0	; 18
 482:	f9 01       	movw	r30, r18
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <LCDcursorLeft+0x18>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 488:	9f 5f       	subi	r25, 0xFF	; 255
 48a:	98 17       	cp	r25, r24
 48c:	a0 f3       	brcs	.-24     	; 0x476 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
 48e:	08 95       	ret

00000490 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 490:	90 e0       	ldi	r25, 0x00	; 0
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=cmd;
 492:	44 e1       	ldi	r20, 0x14	; 20
 494:	2a ef       	ldi	r18, 0xFA	; 250
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	0a c0       	rjmp	.+20     	; 0x4ae <LCDcursorRight+0x1e>
 49a:	45 bb       	out	0x15, r20	; 21
	LCP|=1<<LCD_E;		
 49c:	90 9a       	sbi	0x12, 0	; 18
 49e:	f9 01       	movw	r30, r18
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LCDcursorRight+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 4a4:	90 98       	cbi	0x12, 0	; 18
 4a6:	f9 01       	movw	r30, r18
 4a8:	31 97       	sbiw	r30, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCDcursorRight+0x18>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 4ac:	9f 5f       	subi	r25, 0xFF	; 255
 4ae:	98 17       	cp	r25, r24
 4b0:	a0 f3       	brcs	.-24     	; 0x49a <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
 4b2:	08 95       	ret

000004b4 <__udivmodhi4>:
 4b4:	aa 1b       	sub	r26, r26
 4b6:	bb 1b       	sub	r27, r27
 4b8:	51 e1       	ldi	r21, 0x11	; 17
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__udivmodhi4_ep>

000004bc <__udivmodhi4_loop>:
 4bc:	aa 1f       	adc	r26, r26
 4be:	bb 1f       	adc	r27, r27
 4c0:	a6 17       	cp	r26, r22
 4c2:	b7 07       	cpc	r27, r23
 4c4:	10 f0       	brcs	.+4      	; 0x4ca <__udivmodhi4_ep>
 4c6:	a6 1b       	sub	r26, r22
 4c8:	b7 0b       	sbc	r27, r23

000004ca <__udivmodhi4_ep>:
 4ca:	88 1f       	adc	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	5a 95       	dec	r21
 4d0:	a9 f7       	brne	.-22     	; 0x4bc <__udivmodhi4_loop>
 4d2:	80 95       	com	r24
 4d4:	90 95       	com	r25
 4d6:	bc 01       	movw	r22, r24
 4d8:	cd 01       	movw	r24, r26
 4da:	08 95       	ret

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>
