CCS PCM C Compiler, Version 4.106, 5236               25-Jul-10 01:59

               Filename: D:\work firmware\PIC\main.lst

               ROM used: 419 words (5%)
                         Largest free fragment is 2048
               RAM used: 9 (3%) at main() level
                         22 (6%) worst case
               Stack:    4 locations

*
0000:  NOP
0001:  MOVLW  01
0002:  MOVWF  0A
0003:  GOTO   18A
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,BROWNOUT,PUT,NOLVP  
.................... #use delay(clock=4000000) 
*
0010:  MOVLW  28
0011:  MOVWF  04
0012:  BCF    03.7
0013:  MOVF   00,W
0014:  BTFSC  03.2
0015:  GOTO   024
0016:  MOVLW  01
0017:  MOVWF  78
0018:  CLRF   77
0019:  DECFSZ 77,F
001A:  GOTO   019
001B:  DECFSZ 78,F
001C:  GOTO   018
001D:  MOVLW  4A
001E:  MOVWF  77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  GOTO   022
0022:  DECFSZ 00,F
0023:  GOTO   016
0024:  RETURN
.................... #include "lcd_x1.c" 
.................... // Flex_LCD416.c 
....................  
.................... // These pins are for my Microchip PicDem2-Plus board, 
.................... // which I used to test this driver. 
.................... // An external 20x4 LCD is connected to these pins. 
.................... // Change these pins to match your own board's connections. 
....................  
.................... #define LCD_DB4   PIN_C7 
.................... #define LCD_DB5   PIN_D4 
.................... #define LCD_DB6   PIN_D5 
.................... #define LCD_DB7   PIN_D6 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D0 
.................... #define LCD_E     PIN_C3 
....................  
.................... /* 
.................... // To prove that the driver can be used with random 
.................... // pins, I also tested it with these pins: 
.................... #define LCD_DB4   PIN_D4 
.................... #define LCD_DB5   PIN_B1 
.................... #define LCD_DB6   PIN_C5 
.................... #define LCD_DB7   PIN_B5 
....................  
.................... #define LCD_RS    PIN_E2 
.................... #define LCD_RW    PIN_B2 
.................... #define LCD_E     PIN_D6 
.................... */ 
....................  
.................... // If you want only a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line.  Doing so will save one PIC 
.................... // pin, but at the cost of losing the ability to read from 
.................... // the LCD.  It also makes the write time a little longer 
.................... // because a static delay must be used, instead of polling 
.................... // the LCD's busy bit.  Normally a 6-pin interface is only 
.................... // used if you are running out of PIC pins, and you need 
.................... // to use as few as possible for the LCD. 
.................... #define USE_RW_PIN   1      
....................  
....................  
.................... // These are the line addresses for most 4x20 LCDs. 
.................... #define LCD_LINE_1_ADDRESS 0x00 
.................... #define LCD_LINE_2_ADDRESS 0x40 
.................... #define LCD_LINE_3_ADDRESS 0x10 
.................... #define LCD_LINE_4_ADDRESS 0x50 
....................  
.................... // These are the line addresses for LCD's which use 
.................... // the Hitachi HD66712U controller chip. 
.................... /* 
.................... #define LCD_LINE_1_ADDRESS 0x00 
.................... #define LCD_LINE_2_ADDRESS 0x20 
.................... #define LCD_LINE_3_ADDRESS 0x40 
.................... #define LCD_LINE_4_ADDRESS 0x60 
.................... */ 
....................  
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2   // 0=5x7, 1=5x10, 2=2 lines(or more) 
....................  
.................... int8 lcd_line; 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2),  // Set mode: 4-bit, 2+ lines, 5x8 dots  0x20 | (lcd_type << 2), 
....................  0xf,                     // Display on> 0x0C = ON , 0x0E = cursor on , 0x0F = Blink Cursor  
....................  1,                       // Clear display 
....................  4                        // 6 -Increment cursor ,4  
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
0025:  BTFSC  2F.0
0026:  GOTO   029
0027:  BCF    07.7
0028:  GOTO   02A
0029:  BSF    07.7
002A:  BCF    21.7
002B:  MOVF   21,W
002C:  BSF    03.5
002D:  MOVWF  07
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
002E:  BCF    03.5
002F:  BTFSC  2F.1
0030:  GOTO   033
0031:  BCF    08.4
0032:  GOTO   034
0033:  BSF    08.4
0034:  BSF    03.5
0035:  BCF    08.4
....................  output_bit(LCD_DB6, !!(nibble & 4));    
0036:  BCF    03.5
0037:  BTFSC  2F.2
0038:  GOTO   03B
0039:  BCF    08.5
003A:  GOTO   03C
003B:  BSF    08.5
003C:  BSF    03.5
003D:  BCF    08.5
....................  output_bit(LCD_DB7, !!(nibble & 8));    
003E:  BCF    03.5
003F:  BTFSC  2F.3
0040:  GOTO   043
0041:  BCF    08.6
0042:  GOTO   044
0043:  BSF    08.6
0044:  BSF    03.5
0045:  BCF    08.6
....................  
....................  delay_cycles(1); 
0046:  NOP
....................  output_high(LCD_E); 
0047:  BCF    03.5
0048:  BCF    21.3
0049:  MOVF   21,W
004A:  BSF    03.5
004B:  MOVWF  07
004C:  BCF    03.5
004D:  BSF    07.3
....................  delay_us(2); 
004E:  GOTO   04F
....................  output_low(LCD_E); 
004F:  BCF    21.3
0050:  MOVF   21,W
0051:  BSF    03.5
0052:  MOVWF  07
0053:  BCF    03.5
0054:  BCF    07.3
.................... } 
0055:  RETURN
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called.      
....................  
.................... #ifdef USE_RW_PIN 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
0056:  CLRF   30
....................     
.................... output_high(LCD_E); 
0057:  BCF    21.3
0058:  MOVF   21,W
0059:  BSF    03.5
005A:  MOVWF  07
005B:  BCF    03.5
005C:  BSF    07.3
.................... delay_us(1); 
005D:  NOP
....................  
.................... retval_0 = input(LCD_DB4); 
005E:  BSF    21.7
005F:  MOVF   21,W
0060:  BSF    03.5
0061:  MOVWF  07
0062:  BCF    03.5
0063:  BCF    30.0
0064:  BTFSC  07.7
0065:  BSF    30.0
.................... retval_1 = input(LCD_DB5); 
0066:  BSF    03.5
0067:  BSF    08.4
0068:  BCF    03.5
0069:  BCF    30.1
006A:  BTFSC  08.4
006B:  BSF    30.1
.................... retval_2 = input(LCD_DB6); 
006C:  BSF    03.5
006D:  BSF    08.5
006E:  BCF    03.5
006F:  BCF    30.2
0070:  BTFSC  08.5
0071:  BSF    30.2
.................... retval_3 = input(LCD_DB7); 
0072:  BSF    03.5
0073:  BSF    08.6
0074:  BCF    03.5
0075:  BCF    30.3
0076:  BTFSC  08.6
0077:  BSF    30.3
....................   
.................... output_low(LCD_E); 
0078:  BCF    21.3
0079:  MOVF   21,W
007A:  BSF    03.5
007B:  MOVWF  07
007C:  BCF    03.5
007D:  BCF    07.3
.................... delay_us(1); 
007E:  NOP
....................     
.................... return(retval);    
007F:  MOVF   30,W
0080:  MOVWF  78
.................... }    
0081:  RETURN
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_RW_PIN 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
*
0086:  BSF    03.5
0087:  BCF    08.0
0088:  BCF    03.5
0089:  BSF    08.0
.................... delay_cycles(1); 
008A:  NOP
....................  
.................... high = lcd_read_nibble(); 
008B:  CALL   056
008C:  MOVF   78,W
008D:  MOVWF  2F
....................  
.................... low = lcd_read_nibble(); 
008E:  CALL   056
008F:  MOVF   78,W
0090:  MOVWF  2E
....................  
.................... return( (high<<4) | low); 
0091:  SWAPF  2F,W
0092:  MOVWF  77
0093:  MOVLW  F0
0094:  ANDWF  77,F
0095:  MOVF   77,W
0096:  IORWF  2E,W
0097:  MOVWF  78
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
*
0082:  BSF    03.5
0083:  BCF    08.1
0084:  BCF    03.5
0085:  BCF    08.1
....................  
.................... #ifdef USE_RW_PIN 
.................... while(bit_test(lcd_read_byte(),7)) ; 
*
0098:  MOVF   78,W
0099:  MOVWF  2E
009A:  BTFSC  2E.7
009B:  GOTO   086
.................... #else 
.................... delay_us(60); 
.................... #endif 
....................  
.................... if(address) 
009C:  MOVF   2C,F
009D:  BTFSC  03.2
009E:  GOTO   0A4
....................    output_high(LCD_RS); 
009F:  BSF    03.5
00A0:  BCF    08.1
00A1:  BCF    03.5
00A2:  BSF    08.1
.................... else 
00A3:  GOTO   0A8
....................    output_low(LCD_RS); 
00A4:  BSF    03.5
00A5:  BCF    08.1
00A6:  BCF    03.5
00A7:  BCF    08.1
....................       
....................  delay_cycles(1); 
00A8:  NOP
....................  
.................... #ifdef USE_RW_PIN 
.................... output_low(LCD_RW); 
00A9:  BSF    03.5
00AA:  BCF    08.0
00AB:  BCF    03.5
00AC:  BCF    08.0
.................... delay_cycles(1); 
00AD:  NOP
.................... #endif 
....................  
.................... output_low(LCD_E); 
00AE:  BCF    21.3
00AF:  MOVF   21,W
00B0:  BSF    03.5
00B1:  MOVWF  07
00B2:  BCF    03.5
00B3:  BCF    07.3
....................  
.................... lcd_send_nibble(n >> 4); 
00B4:  SWAPF  2D,W
00B5:  MOVWF  2E
00B6:  MOVLW  0F
00B7:  ANDWF  2E,F
00B8:  MOVF   2E,W
00B9:  MOVWF  2F
00BA:  CALL   025
.................... lcd_send_nibble(n & 0xf); 
00BB:  MOVF   2D,W
00BC:  ANDLW  0F
00BD:  MOVWF  2E
00BE:  MOVWF  2F
00BF:  CALL   025
.................... } 
00C0:  RETURN
.................... //---------------------------- 
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... lcd_line = 1; 
00C1:  MOVLW  01
00C2:  MOVWF  20
....................  
.................... output_low(LCD_RS); 
00C3:  BSF    03.5
00C4:  BCF    08.1
00C5:  BCF    03.5
00C6:  BCF    08.1
....................  
.................... #ifdef USE_RW_PIN 
.................... output_low(LCD_RW); 
00C7:  BSF    03.5
00C8:  BCF    08.0
00C9:  BCF    03.5
00CA:  BCF    08.0
.................... #endif 
....................  
.................... output_low(LCD_E); 
00CB:  BCF    21.3
00CC:  MOVF   21,W
00CD:  BSF    03.5
00CE:  MOVWF  07
00CF:  BCF    03.5
00D0:  BCF    07.3
....................  
.................... // Some LCDs require 15 ms minimum delay after 
.................... // power-up.  Others require 30 ms.  I'm going 
.................... // to set it to 35 ms, so it should work with 
.................... // all of them. 
.................... delay_ms(35);          
00D1:  MOVLW  23
00D2:  MOVWF  28
00D3:  CALL   010
....................  
.................... for(i=0 ;i < 3; i++) 
00D4:  CLRF   24
00D5:  MOVF   24,W
00D6:  SUBLW  02
00D7:  BTFSS  03.0
00D8:  GOTO   0E1
....................    { 
....................     lcd_send_nibble(0x03); 
00D9:  MOVLW  03
00DA:  MOVWF  2F
00DB:  CALL   025
....................     delay_ms(5); 
00DC:  MOVLW  05
00DD:  MOVWF  28
00DE:  CALL   010
....................    } 
00DF:  INCF   24,F
00E0:  GOTO   0D5
....................  
.................... lcd_send_nibble(0x02); 
00E1:  MOVLW  02
00E2:  MOVWF  2F
00E3:  CALL   025
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
00E4:  CLRF   24
00E5:  MOVF   24,W
00E6:  SUBLW  03
00E7:  BTFSS  03.0
00E8:  GOTO   0F2
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
00E9:  MOVF   24,W
00EA:  CALL   004
00EB:  MOVWF  25
00EC:  CLRF   2C
00ED:  MOVF   25,W
00EE:  MOVWF  2D
00EF:  CALL   082
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 50 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_RW_PIN 
....................     delay_ms(5); 
....................     #endif 
....................    } 
00F0:  INCF   24,F
00F1:  GOTO   0E5
....................  
.................... } 
00F2:  BCF    0A.3
00F3:  BCF    0A.4
00F4:  GOTO   197 (RETURN)
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
....................  
.................... switch(y) 
....................   { 
*
010F:  MOVF   29,W
0110:  XORLW  01
0111:  BTFSC  03.2
0112:  GOTO   11D
0113:  XORLW  03
0114:  BTFSC  03.2
0115:  GOTO   11F
0116:  XORLW  01
0117:  BTFSC  03.2
0118:  GOTO   122
0119:  XORLW  07
011A:  BTFSC  03.2
011B:  GOTO   125
011C:  GOTO   128
....................    case 1: 
....................      address = LCD_LINE_1_ADDRESS; 
011D:  CLRF   2A
....................      break; 
011E:  GOTO   12A
....................  
....................    case 2: 
....................      address = LCD_LINE_2_ADDRESS; 
011F:  MOVLW  40
0120:  MOVWF  2A
....................      break; 
0121:  GOTO   12A
....................  
....................    case 3: 
....................      address = LCD_LINE_3_ADDRESS; 
0122:  MOVLW  10
0123:  MOVWF  2A
....................      break; 
0124:  GOTO   12A
....................  
....................    case 4: 
....................      address = LCD_LINE_4_ADDRESS; 
0125:  MOVLW  50
0126:  MOVWF  2A
....................      break; 
0127:  GOTO   12A
....................  
....................    default: 
....................      address = LCD_LINE_1_ADDRESS; 
0128:  CLRF   2A
....................      break; 
0129:  GOTO   12A
....................       
....................   } 
....................  
.................... address += x-1; 
012A:  MOVLW  01
012B:  SUBWF  28,W
012C:  ADDWF  2A,F
.................... lcd_send_byte(0, 0x80 | address); 
012D:  MOVF   2A,W
012E:  IORLW  80
012F:  MOVWF  2B
0130:  CLRF   2C
0131:  MOVF   2B,W
0132:  MOVWF  2D
0133:  CALL   082
0134:  NOP
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
....................    { 
*
00F5:  MOVF   27,W
00F6:  XORLW  0C
00F7:  BTFSC  03.2
00F8:  GOTO   100
00F9:  XORLW  06
00FA:  BTFSC  03.2
00FB:  GOTO   10A
00FC:  XORLW  02
00FD:  BTFSC  03.2
00FE:  GOTO   136
00FF:  GOTO   13B
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0100:  CLRF   2C
0101:  MOVLW  01
0102:  MOVWF  2D
0103:  CALL   082
....................       lcd_line = 1; 
0104:  MOVLW  01
0105:  MOVWF  20
....................       delay_ms(2); 
0106:  MOVLW  02
0107:  MOVWF  28
0108:  CALL   010
....................       break; 
0109:  GOTO   141
....................     
....................     case '\n': 
....................        lcd_gotoxy(1, ++lcd_line); 
010A:  INCF   20,F
010B:  MOVLW  01
010C:  MOVWF  28
010D:  MOVF   20,W
010E:  MOVWF  29
....................        break; 
*
0135:  GOTO   141
....................     
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
0136:  CLRF   2C
0137:  MOVLW  10
0138:  MOVWF  2D
0139:  CALL   082
....................        break; 
013A:  GOTO   141
....................     
....................     default: 
....................        lcd_send_byte(1,c); 
013B:  MOVLW  01
013C:  MOVWF  2C
013D:  MOVF   27,W
013E:  MOVWF  2D
013F:  CALL   082
....................        break; 
0140:  GOTO   141
....................    } 
.................... } 
0141:  RETURN
....................  
.................... //------------------------------ 
.................... #ifdef USE_RW_PIN 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(LCD_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif  
....................  
....................  
.................... void main () 
.................... { 
*
018A:  CLRF   04
018B:  BCF    03.7
018C:  MOVLW  1F
018D:  ANDWF  03,F
018E:  BSF    03.5
018F:  BSF    1F.0
0190:  BSF    1F.1
0191:  BSF    1F.2
0192:  BCF    1F.3
.................... unsigned int16 val; 
.................... lcd_init();   
*
0196:  GOTO   0C1
.................... lcd_putc('\f'); 
0197:  MOVLW  0C
0198:  MOVWF  27
0199:  CALL   0F5
.................... lcd_putc("HaHaHa");  
019A:  MOVLW  0C
019B:  BSF    03.6
019C:  MOVWF  0D
019D:  MOVLW  00
019E:  MOVWF  0F
019F:  BCF    03.6
01A0:  GOTO   142
.................... //setup_port_a( ALL_ANALOG ); 
.................... //setup_adc( ADC_CLOCK_INTERNAL ); 
.................... //set_adc_channel( 0 ); 
.................... //val=read_adc(); 
.................... while(1); 
01A1:  GOTO   1A1
.................... } 
01A2:  GOTO   1A2

Configuration Fuses:
   Word  1: 373A   HS NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG
