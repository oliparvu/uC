
lala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001d0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005c  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000451  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000188  00000000  00000000  00000717  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003b0  00000000  00000000  0000089f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e1  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000108  00000000  00000000  00000da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  7a:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_init>:
return 1;
}
 
unsigned int LCD_init()
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
  82:	88 e3       	ldi	r24, 0x38	; 56
  84:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  86:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  88:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  8a:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  8c:	90 98       	cbi	0x12, 0	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	24 ef       	ldi	r18, 0xF4	; 244
  90:	31 e0       	ldi	r19, 0x01	; 1
  92:	c9 01       	movw	r24, r18
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_init+0x12>
 
unsigned int LCD_init()
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
  98:	8e e0       	ldi	r24, 0x0E	; 14
  9a:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  9c:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  9e:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  a0:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  a2:	90 98       	cbi	0x12, 0	; 18
  a4:	c9 01       	movw	r24, r18
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_init+0x24>
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  ae:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  b0:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  b2:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  b4:	90 98       	cbi	0x12, 0	; 18
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_init+0x36>
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
    wrcomm();                              //Scrie comanda
    dataport = 0x01;                    //Cursor la linia 1, col 1
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  c0:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  c2:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  c4:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  c6:	90 98       	cbi	0x12, 0	; 18
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_init+0x48>
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
    wrcomm();                              //Scrie comanda
    dataport = 0x01;                    //Cursor la linia 1, col 1
    wrcomm();                              //Scrie comanda
    dataport = 0x80;                   //Fara shipt
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  d2:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  d4:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  d6:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  d8:	90 98       	cbi	0x12, 0	; 18
  da:	c9 01       	movw	r24, r18
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_init+0x5a>
    dataport = 0x01;                    //Cursor la linia 1, col 1
    wrcomm();                              //Scrie comanda
    dataport = 0x80;                   //Fara shipt
    wrcomm();                              //Scrie comanda
return 1;
}
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	08 95       	ret

000000e6 <LCD_SendData>:

unsigned int LCD_SendData (void)
{unsigned char l1[]="     ";
  e6:	df 93       	push	r29
  e8:	cf 93       	push	r28
  ea:	00 d0       	rcall	.+0      	; 0xec <LCD_SendData+0x6>
  ec:	00 d0       	rcall	.+0      	; 0xee <LCD_SendData+0x8>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <LCD_SendData+0xa>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	de 01       	movw	r26, r28
  f6:	11 96       	adiw	r26, 0x01	; 1
  f8:	e0 e6       	ldi	r30, 0x60	; 96
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	01 90       	ld	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	81 50       	subi	r24, 0x01	; 1
 104:	e1 f7       	brne	.-8      	; 0xfe <LCD_SendData+0x18>
    return 1;
}  

unsigned int read_adc()
{
  ADMUX=( (1<< MUX0) | (0 << REFS1) | (1 << REFS0) | (0 << ADLAR) ); //Canal 1, Referinta AVCC, Aliniere la dreapta
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	87 b9       	out	0x07, r24	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
 10a:	8e ec       	ldi	r24, 0xCE	; 206
 10c:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
 10e:	34 9b       	sbis	0x06, 4	; 6
 110:	fe cf       	rjmp	.-4      	; 0x10e <LCD_SendData+0x28>
  ADCSRA|=0x10;
 112:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 114:	84 b1       	in	r24, 0x04	; 4
 116:	95 b1       	in	r25, 0x05	; 5
	}




dataport= 0x00;					   //Cursor la linia 1 coloana 1
 118:	15 ba       	out	0x15, r1	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 11a:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 11c:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 11e:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 120:	90 98       	cbi	0x12, 0	; 18
 122:	84 ef       	ldi	r24, 0xF4	; 244
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_SendData+0x40>
 12a:	fe 01       	movw	r30, r28
 12c:	31 96       	adiw	r30, 0x01	; 1


dataport= 0x00;					   //Cursor la linia 1 coloana 1
wrcomm();

for (i=0;i<sizeof l1-1;i++)
 12e:	44 ef       	ldi	r20, 0xF4	; 244
 130:	51 e0       	ldi	r21, 0x01	; 1
 132:	9e 01       	movw	r18, r28
 134:	2a 5f       	subi	r18, 0xFA	; 250
 136:	3f 4f       	sbci	r19, 0xFF	; 255
{
dataport = 48+l1[i];
 138:	81 91       	ld	r24, Z+
 13a:	80 5d       	subi	r24, 0xD0	; 208
 13c:	85 bb       	out	0x15, r24	; 21
    return 1;
}

unsigned int wrdata(void)
{
    commport |= (1 << rs);                            //Setting RS = 1, selecting data register
 13e:	92 9a       	sbi	0x12, 2	; 18
    commport &= ~(1 << wr);                      //Setting RW = 0
 140:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                           //EN = 1
 142:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                      //EN = 0, thus giving high to low pulse on Enable pin
 144:	90 98       	cbi	0x12, 0	; 18
 146:	ca 01       	movw	r24, r20
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_SendData+0x62>


dataport= 0x00;					   //Cursor la linia 1 coloana 1
wrcomm();

for (i=0;i<sizeof l1-1;i++)
 14c:	e2 17       	cp	r30, r18
 14e:	f3 07       	cpc	r31, r19
 150:	99 f7       	brne	.-26     	; 0x138 <LCD_SendData+0x52>
//dataport = 0xC0;                //Cursoar la linia 2 coloana 1
//wrcomm();



 return 1;}
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	26 96       	adiw	r28, 0x06	; 6
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	08 95       	ret

00000168 <main>:
unsigned int read_adc();



int main(void)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
	DDRA = 0x00;							 //PortA in
 16c:	1a ba       	out	0x1a, r1	; 26
    DDRC = 0xFF;                             //PortC out
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	84 bb       	out	0x14, r24	; 20
    DDRD = 0x07;                             //PortD 0, 1, 2 pin out
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	81 bb       	out	0x11, r24	; 17
	LCD_init(); 							 //Initializare LCD
 176:	0e 94 41 00 	call	0x82	; 0x82 <LCD_init>
 17a:	c8 ea       	ldi	r28, 0xA8	; 168
 17c:	d1 e6       	ldi	r29, 0x61	; 97
 17e:	ce 01       	movw	r24, r28
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x18>
while(1)
{_delay_ms(100);
    LCD_SendData();                      //Afisare
 184:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_SendData>
 188:	fa cf       	rjmp	.-12     	; 0x17e <main+0x16>

0000018a <wrcomm>:

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 18a:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 18c:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 18e:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 190:	90 98       	cbi	0x12, 0	; 18
 192:	84 ef       	ldi	r24, 0xF4	; 244
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <wrcomm+0xc>
    _delay_ms(2);                                            //10ms delay
    return 1;
}
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	08 95       	ret

000001a0 <wrdata>:

unsigned int wrdata(void)
{
    commport |= (1 << rs);                            //Setting RS = 1, selecting data register
 1a0:	92 9a       	sbi	0x12, 2	; 18
    commport &= ~(1 << wr);                      //Setting RW = 0
 1a2:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                           //EN = 1
 1a4:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                      //EN = 0, thus giving high to low pulse on Enable pin
 1a6:	90 98       	cbi	0x12, 0	; 18
 1a8:	84 ef       	ldi	r24, 0xF4	; 244
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <wrdata+0xc>
    _delay_ms(2) ;                                      //10ms delay
    return 1;
}  
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <read_adc>:

unsigned int read_adc()
{
  ADMUX=( (1<< MUX0) | (0 << REFS1) | (1 << REFS0) | (0 << ADLAR) ); //Canal 1, Referinta AVCC, Aliniere la dreapta
 1b6:	81 e4       	ldi	r24, 0x41	; 65
 1b8:	87 b9       	out	0x07, r24	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
 1ba:	8e ec       	ldi	r24, 0xCE	; 206
 1bc:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
 1be:	34 9b       	sbis	0x06, 4	; 6
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <read_adc+0x8>
  ADCSRA|=0x10;
 1c2:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 1c4:	24 b1       	in	r18, 0x04	; 4
 1c6:	35 b1       	in	r19, 0x05	; 5
}
 1c8:	c9 01       	movw	r24, r18
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
