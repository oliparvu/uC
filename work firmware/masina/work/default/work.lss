
work.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000002b2  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a9  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000466  00000000  00000000  00000417  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c4  00000000  00000000  0000087d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000059e  00000000  00000000  00000a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013d  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000116  00000000  00000000  000011ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "hd44780.h"

void main (void)
{
	lcd_init();
  82:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_init>
  lcd_clrscr();
  86:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clrscr>
  
  lcd_puts("BuHuHu");
  8a:	80 e6       	ldi	r24, 0x60	; 96
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_puts>

}
  92:	08 95       	ret

00000094 <lcd_write>:
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
  94:	66 23       	and	r22, r22
  96:	11 f0       	breq	.+4      	; 0x9c <lcd_write+0x8>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
  98:	92 9a       	sbi	0x12, 2	; 18
  9a:	01 c0       	rjmp	.+2      	; 0x9e <lcd_write+0xa>
        PrevCmdInvolvedAddressCounter=1;
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
  9c:	92 98       	cbi	0x12, 2	; 18
        PrevCmdInvolvedAddressCounter=0;
        #endif
      }

    #if LCD_BITS==4
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
  9e:	87 ff       	sbrs	r24, 7
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <lcd_write+0x12>
  a2:	af 9a       	sbi	0x15, 7	; 21
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <lcd_write+0x14>
  a6:	af 98       	cbi	0x15, 7	; 21
      lcd_db6_port_set(data&_BV(6));
  a8:	98 2f       	mov	r25, r24
  aa:	86 ff       	sbrs	r24, 6
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <lcd_write+0x1e>
  ae:	ae 9a       	sbi	0x15, 6	; 21
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <lcd_write+0x20>
  b2:	ae 98       	cbi	0x15, 6	; 21
      lcd_db5_port_set(data&_BV(5));
  b4:	95 ff       	sbrs	r25, 5
  b6:	02 c0       	rjmp	.+4      	; 0xbc <lcd_write+0x28>
  b8:	ad 9a       	sbi	0x15, 5	; 21
  ba:	01 c0       	rjmp	.+2      	; 0xbe <lcd_write+0x2a>
  bc:	ad 98       	cbi	0x15, 5	; 21
      lcd_db4_port_set(data&_BV(4));
  be:	94 ff       	sbrs	r25, 4
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcd_write+0x32>
  c2:	ac 9a       	sbi	0x15, 4	; 21
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcd_write+0x34>
  c6:	ac 98       	cbi	0x15, 4	; 21

      Delay_ns(100);
  c8:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
  ca:	90 9a       	sbi	0x12, 0	; 18
      lcd_db4_port_set(data&_BV(4));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
  cc:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
  ce:	90 98       	cbi	0x12, 0	; 18
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
  d0:	93 ff       	sbrs	r25, 3
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <lcd_write+0x44>
  d4:	af 9a       	sbi	0x15, 7	; 21
  d6:	01 c0       	rjmp	.+2      	; 0xda <lcd_write+0x46>
  d8:	af 98       	cbi	0x15, 7	; 21
      lcd_db6_port_set(data&_BV(2));
  da:	92 ff       	sbrs	r25, 2
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <lcd_write+0x4e>
  de:	ae 9a       	sbi	0x15, 6	; 21
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <lcd_write+0x50>
  e2:	ae 98       	cbi	0x15, 6	; 21
      lcd_db5_port_set(data&_BV(1));
  e4:	91 ff       	sbrs	r25, 1
  e6:	02 c0       	rjmp	.+4      	; 0xec <lcd_write+0x58>
  e8:	ad 9a       	sbi	0x15, 5	; 21
  ea:	01 c0       	rjmp	.+2      	; 0xee <lcd_write+0x5a>
  ec:	ad 98       	cbi	0x15, 5	; 21
      lcd_db4_port_set(data&_BV(0));
  ee:	90 ff       	sbrs	r25, 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <lcd_write+0x62>
  f2:	ac 9a       	sbi	0x15, 4	; 21
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <lcd_write+0x64>
  f6:	ac 98       	cbi	0x15, 4	; 21

      Delay_ns(100);
  f8:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
  fa:	90 9a       	sbi	0x12, 0	; 18
      lcd_db4_port_set(data&_BV(0));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
  fc:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
  fe:	90 98       	cbi	0x12, 0	; 18
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
 100:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
 102:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
 104:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
 106:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 108:	66 23       	and	r22, r22
 10a:	41 f4       	brne	.+16     	; 0x11c <lcd_write+0x88>
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	30 f4       	brcc	.+12     	; 0x11c <lcd_write+0x88>
        Delay_us(1640);
 110:	89 e9       	ldi	r24, 0x99	; 153
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_write+0x80>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_write+0x86>
 11a:	03 c0       	rjmp	.+6      	; 0x122 <lcd_write+0x8e>
      else Delay_us(40);
 11c:	9d e0       	ldi	r25, 0x0D	; 13
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_write+0x8a>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_write>
  }
 12c:	08 95       	ret

0000012e <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <lcd_puts_P+0xc>
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
      lcd_putc(c);
 136:	0e 94 93 00 	call	0x126	; 0x126 <lcd_putc>
 13a:	fe 01       	movw	r30, r28
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	84 91       	lpm	r24, Z+
 140:	88 23       	and	r24, r24
 142:	c9 f7       	brne	.-14     	; 0x136 <lcd_puts_P+0x8>
      lcd_putc(c);
  }
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <lcd_puts+0xc>
    register char c;

    while ((c=*s++)) 
      lcd_putc(c);
 152:	0e 94 93 00 	call	0x126	; 0x126 <lcd_putc>
*************************************************************************/
void lcd_puts(const char *s)
  {
    register char c;

    while ((c=*s++)) 
 156:	89 91       	ld	r24, Y+
 158:	88 23       	and	r24, r24
 15a:	d9 f7       	brne	.-10     	; 0x152 <lcd_puts+0x8>
      lcd_putc(c);
  }
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_write>
  }
 168:	08 95       	ret

0000016a <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_command>
  }
 170:	08 95       	ret

00000172 <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_command>
  }
 178:	08 95       	ret

0000017a <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
 17a:	80 58       	subi	r24, 0x80	; 128
 17c:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_command>
  }
 180:	08 95       	ret

00000182 <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 182:	88 9a       	sbi	0x11, 0	; 17
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 184:	8a 9a       	sbi	0x11, 2	; 17
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
 186:	89 9a       	sbi	0x11, 1	; 17
    #endif
    lcd_db7_ddr_high();
 188:	a7 9a       	sbi	0x14, 7	; 20
    lcd_db6_ddr_high();
 18a:	a6 9a       	sbi	0x14, 6	; 20
    lcd_db5_ddr_high();
 18c:	a5 9a       	sbi	0x14, 5	; 20
    lcd_db4_ddr_high();
 18e:	a4 9a       	sbi	0x14, 4	; 20
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 190:	90 98       	cbi	0x12, 0	; 18
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
 192:	92 98       	cbi	0x12, 2	; 18
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
 194:	91 98       	cbi	0x12, 1	; 18
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 196:	af 9a       	sbi	0x15, 7	; 21
    lcd_db6_port_high();
 198:	ae 9a       	sbi	0x15, 6	; 21
    lcd_db5_port_high();
 19a:	ad 9a       	sbi	0x15, 5	; 21
    lcd_db4_port_high();
 19c:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 19e:	85 ea       	ldi	r24, 0xA5	; 165
 1a0:	9e e0       	ldi	r25, 0x0E	; 14
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x20>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x26>
 1a8:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 1aa:	af 98       	cbi	0x15, 7	; 21
    lcd_db6_port_low();
 1ac:	ae 98       	cbi	0x15, 6	; 21
    Delay_ns(100);
 1ae:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1b0:	90 9a       	sbi	0x12, 0	; 18
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
 1b2:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1b4:	90 98       	cbi	0x12, 0	; 18
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(4100);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	94 e0       	ldi	r25, 0x04	; 4
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x38>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x3e>
 1c0:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1c2:	90 9a       	sbi	0x12, 0	; 18
    lcd_e_port_low();

    Delay_us(4100);

    lcd_e_port_high();
    Delay_ns(500);
 1c4:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1c6:	90 98       	cbi	0x12, 0	; 18

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(100);
 1c8:	91 e2       	ldi	r25, 0x21	; 33
 1ca:	9a 95       	dec	r25
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x48>
 1ce:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1d0:	90 9a       	sbi	0x12, 0	; 18
    lcd_e_port_low();

    Delay_us(100);

    lcd_e_port_high();
    Delay_ns(500);
 1d2:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1d4:	90 98       	cbi	0x12, 0	; 18

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(40);
 1d6:	8d e0       	ldi	r24, 0x0D	; 13
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x56>
 1dc:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
 1de:	ac 98       	cbi	0x15, 4	; 21
      Delay_ns(100);
 1e0:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1e2:	90 9a       	sbi	0x12, 0	; 18
    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 1e4:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1e6:	90 98       	cbi	0x12, 0	; 18
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 1e8:	9d e0       	ldi	r25, 0x0D	; 13
 1ea:	9a 95       	dec	r25
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_init+0x68>
 1ee:	00 00       	nop

      lcd_db4_port_low();
 1f0:	ac 98       	cbi	0x15, 4	; 21
      Delay_ns(100);
 1f2:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1f4:	90 9a       	sbi	0x12, 0	; 18
      Delay_us(40);

      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 1f6:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1f8:	90 98       	cbi	0x12, 0	; 18
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_ns(500);
 1fa:	00 00       	nop

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
 1fc:	af 9a       	sbi	0x15, 7	; 21
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
 1fe:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 200:	90 9a       	sbi	0x12, 0	; 18
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 202:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 204:	90 98       	cbi	0x12, 0	; 18

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 206:	8d e0       	ldi	r24, 0x0D	; 13
 208:	8a 95       	dec	r24
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_init+0x86>
 20c:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_command>

    //Display Clear
    lcd_clrscr();
 214:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 21e:	8c e0       	ldi	r24, 0x0C	; 12
 220:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_command>
  }
 224:	08 95       	ret

00000226 <lcd_getc>:
        }
    #endif

    if (rs)
      {
        lcd_rs_port_high();                             // RS=1: Read Data
 226:	92 9a       	sbi	0x12, 2	; 18
        #endif
      }
    else lcd_rs_port_low();                           // RS=0: Read Busy Flag

    
    lcd_rw_port_high();                               // RW=1: Read Mode
 228:	91 9a       	sbi	0x12, 1	; 18

    #if LCD_BITS==4
      lcd_db7_ddr_low();                              // Configure Data Pins as Input
 22a:	a7 98       	cbi	0x14, 7	; 20
      lcd_db6_ddr_low();
 22c:	a6 98       	cbi	0x14, 6	; 20
      lcd_db5_ddr_low();
 22e:	a5 98       	cbi	0x14, 5	; 20
      lcd_db4_ddr_low();
 230:	a4 98       	cbi	0x14, 4	; 20
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 232:	90 9a       	sbi	0x12, 0	; 18
      lcd_db6_ddr_low();
      lcd_db5_ddr_low();
      lcd_db4_ddr_low();

      lcd_e_port_high();                              // Read High Nibble First
      Delay_ns(500);
 234:	00 00       	nop

      data=lcd_db4_pin_get() << 4 | lcd_db5_pin_get() << 5 |
 236:	43 b3       	in	r20, 0x13	; 19
 238:	33 b3       	in	r19, 0x13	; 19
 23a:	53 b3       	in	r21, 0x13	; 19
 23c:	63 b3       	in	r22, 0x13	; 19
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 23e:	90 98       	cbi	0x12, 0	; 18

      data=lcd_db4_pin_get() << 4 | lcd_db5_pin_get() << 5 |
           lcd_db6_pin_get() << 6 | lcd_db7_pin_get() << 7;

      lcd_e_port_low();
      Delay_ns(500);
 240:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 242:	90 9a       	sbi	0x12, 0	; 18

      lcd_e_port_low();
      Delay_ns(500);

      lcd_e_port_high();                              // Read Low Nibble
      Delay_ns(500);
 244:	00 00       	nop

      data|=lcd_db4_pin_get() << 0 | lcd_db5_pin_get() << 1 |
 246:	83 b3       	in	r24, 0x13	; 19
 248:	9d 99       	sbic	0x13, 5	; 19
 24a:	02 c0       	rjmp	.+4      	; 0x250 <lcd_getc+0x2a>
 24c:	e0 e0       	ldi	r30, 0x00	; 0
 24e:	01 c0       	rjmp	.+2      	; 0x252 <lcd_getc+0x2c>
 250:	e2 e0       	ldi	r30, 0x02	; 2
 252:	9e 99       	sbic	0x13, 6	; 19
 254:	02 c0       	rjmp	.+4      	; 0x25a <lcd_getc+0x34>
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	01 c0       	rjmp	.+2      	; 0x25c <lcd_getc+0x36>
 25a:	74 e0       	ldi	r23, 0x04	; 4
 25c:	23 b3       	in	r18, 0x13	; 19
 25e:	22 1f       	adc	r18, r18
 260:	22 27       	eor	r18, r18
 262:	22 1f       	adc	r18, r18
 264:	22 0f       	add	r18, r18
 266:	22 0f       	add	r18, r18
 268:	22 0f       	add	r18, r18
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 26a:	90 98       	cbi	0x12, 0	; 18
      data|=lcd_db4_pin_get() << 0 | lcd_db5_pin_get() << 1 |
            lcd_db6_pin_get() << 2 | lcd_db7_pin_get() << 3;

      lcd_e_port_low();

      lcd_db7_ddr_high();                             // Configure Data Pins as Output
 26c:	a7 9a       	sbi	0x14, 7	; 20
      lcd_db6_ddr_high();
 26e:	a6 9a       	sbi	0x14, 6	; 20
      lcd_db5_ddr_high();
 270:	a5 9a       	sbi	0x14, 5	; 20
      lcd_db4_ddr_high();
 272:	a4 9a       	sbi	0x14, 4	; 20

      lcd_db7_port_high();                            // Pins High (Inactive)
 274:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
 276:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
 278:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
 27a:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db2_port_high();
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif
    
    lcd_rw_port_low();
 27c:	91 98       	cbi	0x12, 1	; 18

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
    if (rs)
      Delay_us(40);
 27e:	9d e0       	ldi	r25, 0x0D	; 13
 280:	9a 95       	dec	r25
 282:	f1 f7       	brne	.-4      	; 0x280 <lcd_getc+0x5a>
 284:	00 00       	nop
 286:	30 72       	andi	r19, 0x20	; 32
 288:	40 71       	andi	r20, 0x10	; 16
 28a:	34 2b       	or	r19, r20
 28c:	50 74       	andi	r21, 0x40	; 64
 28e:	35 2b       	or	r19, r21
 290:	60 78       	andi	r22, 0x80	; 128
 292:	36 2b       	or	r19, r22
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	44 e0       	ldi	r20, 0x04	; 4
 298:	96 95       	lsr	r25
 29a:	87 95       	ror	r24
 29c:	4a 95       	dec	r20
 29e:	e1 f7       	brne	.-8      	; 0x298 <lcd_getc+0x72>
 2a0:	81 70       	andi	r24, 0x01	; 1
 2a2:	38 2b       	or	r19, r24
 2a4:	3e 2b       	or	r19, r30
 2a6:	37 2b       	or	r19, r23
  }

uint8_t lcd_getc()
  {
    return lcd_read(1);
  }
 2a8:	83 2f       	mov	r24, r19
 2aa:	82 2b       	or	r24, r18
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
