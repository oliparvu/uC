
2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800068  00800068  00000380  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a1  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000588  00000000  00000000  00000441  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017d  00000000  00000000  000009c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d4  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000eb  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000138  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000012cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 31 01 	call	0x262	; 0x262 <main>
  8a:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_init>:
 


unsigned int LCD_init()
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
  92:	88 e3       	ldi	r24, 0x38	; 56
  94:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  96:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  98:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  9a:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  9c:	90 98       	cbi	0x12, 0	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	2a ef       	ldi	r18, 0xFA	; 250
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	c9 01       	movw	r24, r18
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_init+0x12>

unsigned int LCD_init()
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
  a8:	8e e0       	ldi	r24, 0x0E	; 14
  aa:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  ac:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  ae:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  b0:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  b2:	90 98       	cbi	0x12, 0	; 18
  b4:	c9 01       	movw	r24, r18
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_init+0x24>
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  be:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  c0:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  c2:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  c4:	90 98       	cbi	0x12, 0	; 18
  c6:	c9 01       	movw	r24, r18
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_init+0x36>
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
    wrcomm();                              //Scrie comanda
    dataport = 0x01;                    //Cursor la linia 1, col 1
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  d0:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  d2:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  d4:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  d6:	90 98       	cbi	0x12, 0	; 18
  d8:	c9 01       	movw	r24, r18
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_init+0x48>
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
    wrcomm();                              //Scrie comanda
    dataport = 0x01;                    //Cursor la linia 1, col 1
    wrcomm();                              //Scrie comanda
    dataport = 0x80;                   //Fara shift
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
  e2:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
  e4:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
  e6:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
  e8:	90 98       	cbi	0x12, 0	; 18
  ea:	c9 01       	movw	r24, r18
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_init+0x5a>
    dataport = 0x01;                    //Cursor la linia 1, col 1
    wrcomm();                              //Scrie comanda
    dataport = 0x80;                   //Fara shift
    wrcomm();                              //Scrie comanda
return 1;
}
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret

000000f6 <Mean>:
    return 1;
}  

unsigned int read_adc(unsigned int channel)
{	
  ADMUX=channel;
  f6:	81 e4       	ldi	r24, 0x41	; 65
  f8:	87 b9       	out	0x07, r24	; 7

  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  fa:	8e ec       	ldi	r24, 0xCE	; 206
  fc:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  fe:	34 9b       	sbis	0x06, 4	; 6
 100:	fe cf       	rjmp	.-4      	; 0xfe <Mean+0x8>
  ADCSRA|=0x10; 
 102:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 104:	64 b1       	in	r22, 0x04	; 4
 106:	75 b1       	in	r23, 0x05	; 5



unsigned int Mean()					//Citeste 3 valori ale tensiunii la intervale de 100ms si face media
{
 v1=read_adc(adc1);
 108:	70 93 69 00 	sts	0x0069, r23
 10c:	60 93 68 00 	sts	0x0068, r22
 110:	88 eb       	ldi	r24, 0xB8	; 184
 112:	9b e0       	ldi	r25, 0x0B	; 11
 114:	29 e1       	ldi	r18, 0x19	; 25
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <Mean+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <Mean+0x22>
    return 1;
}  

unsigned int read_adc(unsigned int channel)
{	
  ADMUX=channel;
 122:	81 e4       	ldi	r24, 0x41	; 65
 124:	87 b9       	out	0x07, r24	; 7

  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
 126:	8e ec       	ldi	r24, 0xCE	; 206
 128:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
 12a:	34 9b       	sbis	0x06, 4	; 6
 12c:	fe cf       	rjmp	.-4      	; 0x12a <Mean+0x34>
  ADCSRA|=0x10; 
 12e:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 130:	24 b1       	in	r18, 0x04	; 4
 132:	35 b1       	in	r19, 0x05	; 5

unsigned int Mean()					//Citeste 3 valori ale tensiunii la intervale de 100ms si face media
{
 v1=read_adc(adc1);
 _delay_ms(300);
 v2=read_adc(adc1);
 134:	30 93 6f 00 	sts	0x006F, r19
 138:	20 93 6e 00 	sts	0x006E, r18
 13c:	88 eb       	ldi	r24, 0xB8	; 184
 13e:	9b e0       	ldi	r25, 0x0B	; 11
 140:	49 e1       	ldi	r20, 0x19	; 25
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	fa 01       	movw	r30, r20
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <Mean+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14c:	d9 f7       	brne	.-10     	; 0x144 <Mean+0x4e>
    return 1;
}  

unsigned int read_adc(unsigned int channel)
{	
  ADMUX=channel;
 14e:	81 e4       	ldi	r24, 0x41	; 65
 150:	87 b9       	out	0x07, r24	; 7

  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
 152:	8e ec       	ldi	r24, 0xCE	; 206
 154:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
 156:	34 9b       	sbis	0x06, 4	; 6
 158:	fe cf       	rjmp	.-4      	; 0x156 <Mean+0x60>
  ADCSRA|=0x10; 
 15a:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 15c:	84 b1       	in	r24, 0x04	; 4
 15e:	95 b1       	in	r25, 0x05	; 5
{
 v1=read_adc(adc1);
 _delay_ms(300);
 v2=read_adc(adc1);
 _delay_ms(300);
 v3=read_adc(adc1);
 160:	90 93 6b 00 	sts	0x006B, r25
 164:	80 93 6a 00 	sts	0x006A, r24
 
 val=(v1+v2+v3)/3;
 168:	26 0f       	add	r18, r22
 16a:	37 1f       	adc	r19, r23
 16c:	82 0f       	add	r24, r18
 16e:	93 1f       	adc	r25, r19
 170:	63 e0       	ldi	r22, 0x03	; 3
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodhi4>
 178:	cb 01       	movw	r24, r22
 //val*=5.03/253;						//Vin(mV)=(ADCW*Vref[V])/10.24
 val*=503/253;
 17a:	60 93 6c 00 	sts	0x006C, r22
 17e:	90 93 6d 00 	sts	0x006D, r25
return val;
}
 182:	08 95       	ret

00000184 <process>:

unsigned int process()
{

 unsigned int u;
 u=Mean(adc1)*3/20;
 184:	81 e4       	ldi	r24, 0x41	; 65
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 7b 00 	call	0xf6	; 0xf6 <Mean>
 18c:	9c 01       	movw	r18, r24
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	82 0f       	add	r24, r18
 194:	93 1f       	adc	r25, r19
 196:	64 e1       	ldi	r22, 0x14	; 20
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodhi4>
 19e:	46 2f       	mov	r20, r22
 1a0:	e7 2f       	mov	r30, r23
//u=Mean(adc1);
l1[2]=u+48;

 if(((u/100)%1000)==0x01) 		//Mascarea primului 0
 1a2:	86 2f       	mov	r24, r22
 1a4:	97 2f       	mov	r25, r23
 1a6:	64 e6       	ldi	r22, 0x64	; 100
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodhi4>
 1ae:	cb 01       	movw	r24, r22
 1b0:	68 ee       	ldi	r22, 0xE8	; 232
 1b2:	73 e0       	ldi	r23, 0x03	; 3
 1b4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodhi4>
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	11 f4       	brne	.+4      	; 0x1c0 <process+0x3c>
  	l1[2]=(u/100)%1000+48;
 1bc:	81 e3       	ldi	r24, 0x31	; 49
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <process+0x3e>
 else
 	l1[2]=0x20;						// 0x20=" " ASCII
 1c0:	80 e2       	ldi	r24, 0x20	; 32
 1c2:	80 93 62 00 	sts	0x0062, r24
 if((((u/10)%100)>=0x0A)&&(((u/10)%100)<0x0F))
 1c6:	84 2f       	mov	r24, r20
 1c8:	9e 2f       	mov	r25, r30
 1ca:	6a e0       	ldi	r22, 0x0A	; 10
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodhi4>
 1d2:	cb 01       	movw	r24, r22
 1d4:	64 e6       	ldi	r22, 0x64	; 100
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodhi4>
 1dc:	9c 01       	movw	r18, r24
 1de:	0a 97       	sbiw	r24, 0x0a	; 10
 1e0:	05 97       	sbiw	r24, 0x05	; 5
 1e2:	60 f4       	brcc	.+24     	; 0x1fc <process+0x78>
 {
	l1[3]=(u/10)%100+38;
 1e4:	82 2f       	mov	r24, r18
 1e6:	8a 5d       	subi	r24, 0xDA	; 218
 1e8:	80 93 63 00 	sts	0x0063, r24
	l1[5]=(u)%10+47;
 1ec:	84 2f       	mov	r24, r20
 1ee:	9e 2f       	mov	r25, r30
 1f0:	6a e0       	ldi	r22, 0x0A	; 10
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodhi4>
 1f8:	81 5d       	subi	r24, 0xD1	; 209
 1fa:	10 c0       	rjmp	.+32     	; 0x21c <process+0x98>
 }
 	else
		if (((u/10)%100)==0x0F)
 1fc:	2f 30       	cpi	r18, 0x0F	; 15
 1fe:	31 05       	cpc	r19, r1
 200:	11 f4       	brne	.+4      	; 0x206 <process+0x82>
		{ 	l1[3]=(u/10)%100+38;
 202:	85 e3       	ldi	r24, 0x35	; 53
 204:	02 c0       	rjmp	.+4      	; 0x20a <process+0x86>
			l1[5]=(u)%10+48;
		}
			else
			{	l1[3]=(u/10)%100+48;
 206:	82 2f       	mov	r24, r18
 208:	80 5d       	subi	r24, 0xD0	; 208
 20a:	80 93 63 00 	sts	0x0063, r24
				l1[5]=(u)%10+48;
 20e:	84 2f       	mov	r24, r20
 210:	9e 2f       	mov	r25, r30
 212:	6a e0       	ldi	r22, 0x0A	; 10
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodhi4>
 21a:	80 5d       	subi	r24, 0xD0	; 208
 21c:	80 93 65 00 	sts	0x0065, r24
			}
			
return 1;
}
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	08 95       	ret

00000226 <LCD_SendData>:

unsigned int LCD_SendData ()
{
 unsigned int i;

dataport= 0x02;					   //Cursor la linia 1 coloana 1
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	85 bb       	out	0x15, r24	; 21

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 22a:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 22c:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 22e:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 230:	90 98       	cbi	0x12, 0	; 18
 232:	8a ef       	ldi	r24, 0xFA	; 250
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_SendData+0x10>
 23a:	e0 e6       	ldi	r30, 0x60	; 96
 23c:	f0 e0       	ldi	r31, 0x00	; 0
dataport= 0x02;					   //Cursor la linia 1 coloana 1
wrcomm();

for (i=0;i<sizeof l1-1;i++)
{
dataport = l1[i];
 23e:	2a ef       	ldi	r18, 0xFA	; 250
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	81 91       	ld	r24, Z+
 244:	85 bb       	out	0x15, r24	; 21
    return 1;
}

unsigned int wrdata(void)
{
    commport |= (1 << rs);                            //Setting RS = 1, selecting data register
 246:	92 9a       	sbi	0x12, 2	; 18
    commport &= ~(1 << wr);                      //Setting RW = 0
 248:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                           //EN = 1
 24a:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                      //EN = 0, thus giving high to low pulse on Enable pin
 24c:	90 98       	cbi	0x12, 0	; 18
 24e:	c9 01       	movw	r24, r18
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_SendData+0x2a>
 unsigned int i;

dataport= 0x02;					   //Cursor la linia 1 coloana 1
wrcomm();

for (i=0;i<sizeof l1-1;i++)
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	e7 36       	cpi	r30, 0x67	; 103
 258:	f8 07       	cpc	r31, r24
 25a:	99 f7       	brne	.-26     	; 0x242 <LCD_SendData+0x1c>
}
   
//dataport = 0xC0;                //Cursor la linia 2 coloana 1
//wrcomm();

 return 1;}
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	08 95       	ret

00000262 <main>:
unsigned int val,v1,v2,v3,channel;
//unsigned long val;

int main(void)
{
	DDRA = 0x00;							 //PortA in
 262:	1a ba       	out	0x1a, r1	; 26
    DDRC = 0xFF;                             //PortC out
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	84 bb       	out	0x14, r24	; 20
    DDRD = 0xFF;                             //PortD 0, 1, 2 pin out
 268:	81 bb       	out	0x11, r24	; 17
	LCD_init(); 							 //Initializare LCD
 26a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_init>



	while(1)
{ 
	process();
 26e:	0e 94 c2 00 	call	0x184	; 0x184 <process>
    LCD_SendData();                    //Afisare
 272:	0e 94 13 01 	call	0x226	; 0x226 <LCD_SendData>
 276:	fb cf       	rjmp	.-10     	; 0x26e <main+0xc>

00000278 <wrcomm>:

 return 1;}

unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 278:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 27a:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 27c:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 27e:	90 98       	cbi	0x12, 0	; 18
 280:	8a ef       	ldi	r24, 0xFA	; 250
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <wrcomm+0xc>
    _delay_ms(1);                                            //2ms delay
    return 1;
}
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	08 95       	ret

0000028e <wrdata>:

unsigned int wrdata(void)
{
    commport |= (1 << rs);                            //Setting RS = 1, selecting data register
 28e:	92 9a       	sbi	0x12, 2	; 18
    commport &= ~(1 << wr);                      //Setting RW = 0
 290:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                           //EN = 1
 292:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                      //EN = 0, thus giving high to low pulse on Enable pin
 294:	90 98       	cbi	0x12, 0	; 18
 296:	8a ef       	ldi	r24, 0xFA	; 250
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <wrdata+0xc>
    _delay_ms(1) ;                                      //2ms delay
    return 1;
}  
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	08 95       	ret

000002a4 <read_adc>:

unsigned int read_adc(unsigned int channel)
{	
  ADMUX=channel;
 2a4:	87 b9       	out	0x07, r24	; 7

  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
 2a6:	8e ec       	ldi	r24, 0xCE	; 206
 2a8:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
 2aa:	34 9b       	sbis	0x06, 4	; 6
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <read_adc+0x6>
  ADCSRA|=0x10; 
 2ae:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 2b0:	24 b1       	in	r18, 0x04	; 4
 2b2:	35 b1       	in	r19, 0x05	; 5
}
 2b4:	c9 01       	movw	r24, r18
 2b6:	08 95       	ret

000002b8 <__udivmodhi4>:
 2b8:	aa 1b       	sub	r26, r26
 2ba:	bb 1b       	sub	r27, r27
 2bc:	51 e1       	ldi	r21, 0x11	; 17
 2be:	07 c0       	rjmp	.+14     	; 0x2ce <__udivmodhi4_ep>

000002c0 <__udivmodhi4_loop>:
 2c0:	aa 1f       	adc	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	a6 17       	cp	r26, r22
 2c6:	b7 07       	cpc	r27, r23
 2c8:	10 f0       	brcs	.+4      	; 0x2ce <__udivmodhi4_ep>
 2ca:	a6 1b       	sub	r26, r22
 2cc:	b7 0b       	sbc	r27, r23

000002ce <__udivmodhi4_ep>:
 2ce:	88 1f       	adc	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	5a 95       	dec	r21
 2d4:	a9 f7       	brne	.-22     	; 0x2c0 <__udivmodhi4_loop>
 2d6:	80 95       	com	r24
 2d8:	90 95       	com	r25
 2da:	bc 01       	movw	r22, r24
 2dc:	cd 01       	movw	r24, r26
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
