
lala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000003b8  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007c  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000648  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b9  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005bc  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f8  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001f0  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  7a:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Mean>:

return 1;
}

unsigned int Mean(unsigned int n)		//achizitioneaza  3 esantioane la interval de 100ms, apoi face media aritmetica
{
  82:	48 2f       	mov	r20, r24
   _delay_ms(2) ;                                      //10ms delay
    return 1;
}  

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  84:	87 b9       	out	0x07, r24	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  86:	8e ec       	ldi	r24, 0xCE	; 206
  88:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  8a:	34 9b       	sbis	0x06, 4	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <Mean+0x8>
  ADCSRA|=0x10;
  8e:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  90:	64 b1       	in	r22, 0x04	; 4
  92:	75 b1       	in	r23, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	88 ea       	ldi	r24, 0xA8	; 168
  96:	91 e6       	ldi	r25, 0x61	; 97
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <Mean+0x16>
   _delay_ms(2) ;                                      //10ms delay
    return 1;
}  

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  9c:	47 b9       	out	0x07, r20	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  9e:	8e ec       	ldi	r24, 0xCE	; 206
  a0:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <Mean+0x20>
  ADCSRA|=0x10;
  a6:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  a8:	24 b1       	in	r18, 0x04	; 4
  aa:	35 b1       	in	r19, 0x05	; 5
  ac:	88 ea       	ldi	r24, 0xA8	; 168
  ae:	91 e6       	ldi	r25, 0x61	; 97
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <Mean+0x2e>
   _delay_ms(2) ;                                      //10ms delay
    return 1;
}  

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  b4:	47 b9       	out	0x07, r20	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  b6:	8e ec       	ldi	r24, 0xCE	; 206
  b8:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  ba:	34 9b       	sbis	0x06, 4	; 6
  bc:	fe cf       	rjmp	.-4      	; 0xba <Mean+0x38>
  ADCSRA|=0x10;
  be:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	95 b1       	in	r25, 0x05	; 5
v1=read_adc(n);
_delay_ms(100);
v2=read_adc(n);
_delay_ms(100);
v3=read_adc(n);
val=(v1+v2+v3)/3;
  c4:	26 0f       	add	r18, r22
  c6:	37 1f       	adc	r19, r23
  c8:	82 0f       	add	r24, r18
  ca:	93 1f       	adc	r25, r19
  cc:	63 e0       	ldi	r22, 0x03	; 3
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	0e 94 c6 01 	call	0x38c	; 0x38c <__udivmodhi4>
val=val*49;
  d4:	21 e3       	ldi	r18, 0x31	; 49
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	62 9f       	mul	r22, r18
  da:	c0 01       	movw	r24, r0
  dc:	63 9f       	mul	r22, r19
  de:	90 0d       	add	r25, r0
  e0:	72 9f       	mul	r23, r18
  e2:	90 0d       	add	r25, r0
  e4:	11 24       	eor	r1, r1
  e6:	6a e0       	ldi	r22, 0x0A	; 10
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	0e 94 c6 01 	call	0x38c	; 0x38c <__udivmodhi4>
  ee:	cb 01       	movw	r24, r22
val=val/10;

return val;

}
  f0:	08 95       	ret

000000f2 <Temp>:
}
return 1;
}

unsigned int Temp(void)
{
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	28 97       	sbiw	r28, 0x08	; 8
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
unsigned int i=3,j=3,val,val2;
unsigned char t[]="   ", u[]="   ";
 10a:	80 91 60 00 	lds	r24, 0x0060
 10e:	90 91 61 00 	lds	r25, 0x0061
 112:	a0 91 62 00 	lds	r26, 0x0062
 116:	b0 91 63 00 	lds	r27, 0x0063
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	9a 83       	std	Y+2, r25	; 0x02
 11e:	ab 83       	std	Y+3, r26	; 0x03
 120:	bc 83       	std	Y+4, r27	; 0x04
 122:	8d 83       	std	Y+5, r24	; 0x05
 124:	9e 83       	std	Y+6, r25	; 0x06
 126:	af 83       	std	Y+7, r26	; 0x07
 128:	b8 87       	std	Y+8, r27	; 0x08

val=10*Mean(temp);
 12a:	83 e4       	ldi	r24, 0x43	; 67
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 41 00 	call	0x82	; 0x82 <Mean>
 132:	9c 01       	movw	r18, r24
 134:	fc 01       	movw	r30, r24
 136:	73 e0       	ldi	r23, 0x03	; 3
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	7a 95       	dec	r23
 13e:	e1 f7       	brne	.-8      	; 0x138 <Temp+0x46>
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	e2 0f       	add	r30, r18
 146:	f3 1f       	adc	r31, r19
 148:	8e 01       	movw	r16, r28
 14a:	0c 5f       	subi	r16, 0xFC	; 252
 14c:	1f 4f       	sbci	r17, 0xFF	; 255
 14e:	0f c0       	rjmp	.+30     	; 0x16e <Temp+0x7c>

while(val)				//separa cifrele si le salveaza in sirul t
	{
	t[i]=val%10;
 150:	cf 01       	movw	r24, r30
 152:	6a e0       	ldi	r22, 0x0A	; 10
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	0e 94 c6 01 	call	0x38c	; 0x38c <__udivmodhi4>
 15a:	d8 01       	movw	r26, r16
 15c:	8c 93       	st	X, r24
	val=val/10;
 15e:	cf 01       	movw	r24, r30
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	0e 94 c6 01 	call	0x38c	; 0x38c <__udivmodhi4>
 168:	fb 01       	movw	r30, r22
 16a:	01 50       	subi	r16, 0x01	; 1
 16c:	10 40       	sbci	r17, 0x00	; 0
unsigned int i=3,j=3,val,val2;
unsigned char t[]="   ", u[]="   ";

val=10*Mean(temp);

while(val)				//separa cifrele si le salveaza in sirul t
 16e:	30 97       	sbiw	r30, 0x00	; 0
 170:	79 f7       	brne	.-34     	; 0x150 <Temp+0x5e>
	t[i]=val%10;
	val=val/10;
	i--;
	}

l1[7]=48+t[0];			//cifra zecilor pe pozitia 10 de pe LCD
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	80 5d       	subi	r24, 0xD0	; 208
 176:	80 93 6b 00 	sts	0x006B, r24
if(l1[7]==0x50)		//ascunde primul 0
 17a:	80 35       	cpi	r24, 0x50	; 80
 17c:	19 f4       	brne	.+6      	; 0x184 <Temp+0x92>
{
	l1[7]=0x20;			//0x20 ascii = " "
 17e:	80 e2       	ldi	r24, 0x20	; 32
 180:	80 93 6b 00 	sts	0x006B, r24
}

l1[8]=48+t[1];			//cifra unitatilor pe pozitia 11
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	80 5d       	subi	r24, 0xD0	; 208
 188:	80 93 6c 00 	sts	0x006C, r24
if(l1[8]==0x50)
 18c:	80 35       	cpi	r24, 0x50	; 80
 18e:	19 f4       	brne	.+6      	; 0x196 <Temp+0xa4>
{
	l1[8]=0x30;
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	80 93 6c 00 	sts	0x006C, r24
}

l1[10]=48+t[2];			//prima zecimala pe pozitia 13
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	80 5d       	subi	r24, 0xD0	; 208
 19a:	80 93 6e 00 	sts	0x006E, r24
if(l1[10]==0x50)
 19e:	80 35       	cpi	r24, 0x50	; 80
 1a0:	19 f4       	brne	.+6      	; 0x1a8 <Temp+0xb6>
{
	l1[10]=0x30;
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	80 93 6e 00 	sts	0x006E, r24
}


val2=10*Mean(temp2);
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 41 00 	call	0x82	; 0x82 <Mean>
 1b0:	9c 01       	movw	r18, r24
 1b2:	53 e0       	ldi	r21, 0x03	; 3
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	5a 95       	dec	r21
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <Temp+0xc2>
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	82 0f       	add	r24, r18
 1c2:	93 1f       	adc	r25, r19
if (val2>=2731)
 1c4:	ba e0       	ldi	r27, 0x0A	; 10
 1c6:	8b 3a       	cpi	r24, 0xAB	; 171
 1c8:	9b 07       	cpc	r25, r27
 1ca:	20 f0       	brcs	.+8      	; 0x1d4 <Temp+0xe2>
{
	val2-=2731;
 1cc:	9c 01       	movw	r18, r24
 1ce:	2b 5a       	subi	r18, 0xAB	; 171
 1d0:	3a 40       	sbci	r19, 0x0A	; 10
 1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <Temp+0xf0>
}
else
{
	val2=2731-val2;
 1d4:	2b ea       	ldi	r18, 0xAB	; 171
 1d6:	3a e0       	ldi	r19, 0x0A	; 10
 1d8:	28 1b       	sub	r18, r24
 1da:	39 0b       	sbc	r19, r25
	l1[8]=0x2D;
 1dc:	8d e2       	ldi	r24, 0x2D	; 45
 1de:	80 93 6c 00 	sts	0x006C, r24
 1e2:	fe 01       	movw	r30, r28
 1e4:	38 96       	adiw	r30, 0x08	; 8
 1e6:	0d c0       	rjmp	.+26     	; 0x202 <Temp+0x110>
}

while(val2)				//separa cifrele si le salveaza in sirul t
	{
	u[j]=val2%10;
 1e8:	c9 01       	movw	r24, r18
 1ea:	6a e0       	ldi	r22, 0x0A	; 10
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	0e 94 c6 01 	call	0x38c	; 0x38c <__udivmodhi4>
 1f2:	80 83       	st	Z, r24
	val2=val2/10;
 1f4:	c9 01       	movw	r24, r18
 1f6:	6a e0       	ldi	r22, 0x0A	; 10
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	0e 94 c6 01 	call	0x38c	; 0x38c <__udivmodhi4>
 1fe:	9b 01       	movw	r18, r22
 200:	31 97       	sbiw	r30, 0x01	; 1
{
	val2=2731-val2;
	l1[8]=0x2D;
}

while(val2)				//separa cifrele si le salveaza in sirul t
 202:	21 15       	cp	r18, r1
 204:	31 05       	cpc	r19, r1
 206:	81 f7       	brne	.-32     	; 0x1e8 <Temp+0xf6>
	u[j]=val2%10;
	val2=val2/10;
	j--;
	}

l2[8]=48+u[0];			//cifra zecilor pe pozitia 10 de pe LCD
 208:	8d 81       	ldd	r24, Y+5	; 0x05
 20a:	80 5d       	subi	r24, 0xD0	; 208
 20c:	80 93 7d 00 	sts	0x007D, r24
if(l2[8]==0x50)		//ascunde primul 0
 210:	80 35       	cpi	r24, 0x50	; 80
 212:	19 f4       	brne	.+6      	; 0x21a <Temp+0x128>
{
	l2[8]=0x20;			//0x20 ascii = " "
 214:	80 e2       	ldi	r24, 0x20	; 32
 216:	80 93 7d 00 	sts	0x007D, r24
}

l2[9]=48+u[1];			//cifra unitatilor pe pozitia 11
 21a:	8e 81       	ldd	r24, Y+6	; 0x06
 21c:	80 5d       	subi	r24, 0xD0	; 208
 21e:	80 93 7e 00 	sts	0x007E, r24
if(l2[9]==0x50)
 222:	80 35       	cpi	r24, 0x50	; 80
 224:	19 f4       	brne	.+6      	; 0x22c <Temp+0x13a>
{
	l2[9]=0x30;
 226:	80 e3       	ldi	r24, 0x30	; 48
 228:	80 93 7e 00 	sts	0x007E, r24
}

l2[11]=48+u[2];			//prima zecimala pe pozitia 13
 22c:	8f 81       	ldd	r24, Y+7	; 0x07
 22e:	80 5d       	subi	r24, 0xD0	; 208
 230:	80 93 80 00 	sts	0x0080, r24
if(l2[11]==0x50)
 234:	80 35       	cpi	r24, 0x50	; 80
 236:	19 f4       	brne	.+6      	; 0x23e <Temp+0x14c>
{
	l2[11]=0x30;
 238:	80 e3       	ldi	r24, 0x30	; 48
 23a:	80 93 80 00 	sts	0x0080, r24
}

return 1;
}
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	28 96       	adiw	r28, 0x08	; 8
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	cf 91       	pop	r28
 250:	df 91       	pop	r29
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <LCD_SendData>:


unsigned int LCD_SendData (void)    //Afiseaza pe LCD sirul 
{
unsigned int i,j;
dataport= 0x01;					   //Cursor la linia 1 coloana 1
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	85 bb       	out	0x15, r24	; 21



unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 25c:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 25e:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 260:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 262:	90 98       	cbi	0x12, 0	; 18
 264:	84 ef       	ldi	r24, 0xF4	; 244
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_SendData+0x10>
 26c:	e4 e6       	ldi	r30, 0x64	; 100
 26e:	f0 e0       	ldi	r31, 0x00	; 0
dataport= 0x01;					   //Cursor la linia 1 coloana 1
wrcomm();

for (i=0;i<16;i++)
{
dataport=l1[i];
 270:	24 ef       	ldi	r18, 0xF4	; 244
 272:	31 e0       	ldi	r19, 0x01	; 1
 274:	81 91       	ld	r24, Z+
 276:	85 bb       	out	0x15, r24	; 21
    return 1;
}

unsigned int wrdata(void)
{
    commport |= (1 << rs);                            //Setting RS = 1, selecting data register
 278:	92 9a       	sbi	0x12, 2	; 18
    commport &= ~(1 << wr);                      //Setting RW = 0
 27a:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                           //EN = 1
 27c:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                      //EN = 0, thus giving high to low pulse on Enable pin
 27e:	90 98       	cbi	0x12, 0	; 18
 280:	c9 01       	movw	r24, r18
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_SendData+0x2a>
{
unsigned int i,j;
dataport= 0x01;					   //Cursor la linia 1 coloana 1
wrcomm();

for (i=0;i<16;i++)
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	e4 37       	cpi	r30, 0x74	; 116
 28a:	f8 07       	cpc	r31, r24
 28c:	99 f7       	brne	.-26     	; 0x274 <LCD_SendData+0x1c>
{
dataport=l1[i];
wrdata();
} 

dataport = 0xC0;                //Cursor la linia 2 coloana 1
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	85 bb       	out	0x15, r24	; 21



unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 292:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 294:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 296:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 298:	90 98       	cbi	0x12, 0	; 18
 29a:	84 ef       	ldi	r24, 0xF4	; 244
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_SendData+0x46>
 2a2:	e5 e7       	ldi	r30, 0x75	; 117
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
dataport = 0xC0;                //Cursor la linia 2 coloana 1
wrcomm();

for (j=0;j<16;j++)
{
dataport=l2[j];
 2a6:	24 ef       	ldi	r18, 0xF4	; 244
 2a8:	31 e0       	ldi	r19, 0x01	; 1
 2aa:	81 91       	ld	r24, Z+
 2ac:	85 bb       	out	0x15, r24	; 21
    return 1;
}

unsigned int wrdata(void)
{
    commport |= (1 << rs);                            //Setting RS = 1, selecting data register
 2ae:	92 9a       	sbi	0x12, 2	; 18
    commport &= ~(1 << wr);                      //Setting RW = 0
 2b0:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                           //EN = 1
 2b2:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                      //EN = 0, thus giving high to low pulse on Enable pin
 2b4:	90 98       	cbi	0x12, 0	; 18
 2b6:	c9 01       	movw	r24, r18
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_SendData+0x60>
} 

dataport = 0xC0;                //Cursor la linia 2 coloana 1
wrcomm();

for (j=0;j<16;j++)
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	e5 38       	cpi	r30, 0x85	; 133
 2c0:	f8 07       	cpc	r31, r24
 2c2:	99 f7       	brne	.-26     	; 0x2aa <LCD_SendData+0x52>
dataport=l2[j];
wrdata();
} 

return 1;
}
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret

000002ca <wrcomm>:



unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 2ca:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 2cc:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 2ce:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 2d0:	90 98       	cbi	0x12, 0	; 18
 2d2:	84 ef       	ldi	r24, 0xF4	; 244
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <wrcomm+0xc>
    _delay_ms(2);                                            //10ms delay
    return 1;
}
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	08 95       	ret

000002e0 <wrdata>:

unsigned int wrdata(void)
{
    commport |= (1 << rs);                            //Setting RS = 1, selecting data register
 2e0:	92 9a       	sbi	0x12, 2	; 18
    commport &= ~(1 << wr);                      //Setting RW = 0
 2e2:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                           //EN = 1
 2e4:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                      //EN = 0, thus giving high to low pulse on Enable pin
 2e6:	90 98       	cbi	0x12, 0	; 18
 2e8:	84 ef       	ldi	r24, 0xF4	; 244
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <wrdata+0xc>
   _delay_ms(2) ;                                      //10ms delay
    return 1;
}  
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <read_adc>:

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
 2f6:	87 b9       	out	0x07, r24	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
 2f8:	8e ec       	ldi	r24, 0xCE	; 206
 2fa:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
 2fc:	34 9b       	sbis	0x06, 4	; 6
 2fe:	fe cf       	rjmp	.-4      	; 0x2fc <read_adc+0x6>
  ADCSRA|=0x10;
 300:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 302:	24 b1       	in	r18, 0x04	; 4
 304:	35 b1       	in	r19, 0x05	; 5
}
 306:	c9 01       	movw	r24, r18
 308:	08 95       	ret

0000030a <LCD_init>:

unsigned int LCD_init()
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
 30a:	88 e3       	ldi	r24, 0x38	; 56
 30c:	85 bb       	out	0x15, r24	; 21



unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 30e:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 310:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 312:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 314:	90 98       	cbi	0x12, 0	; 18
 316:	24 ef       	ldi	r18, 0xF4	; 244
 318:	31 e0       	ldi	r19, 0x01	; 1
 31a:	c9 01       	movw	r24, r18
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_init+0x12>

unsigned int LCD_init()
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
 320:	8e e0       	ldi	r24, 0x0E	; 14
 322:	85 bb       	out	0x15, r24	; 21



unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 324:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 326:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 328:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 32a:	90 98       	cbi	0x12, 0	; 18
 32c:	c9 01       	movw	r24, r18
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_init+0x24>
{
    dataport = 0x38;                    //LCD 2 linii 5x7 
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
 332:	8c e0       	ldi	r24, 0x0C	; 12
 334:	85 bb       	out	0x15, r24	; 21



unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 336:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 338:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 33a:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 33c:	90 98       	cbi	0x12, 0	; 18
 33e:	c9 01       	movw	r24, r18
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_init+0x36>
    wrcomm();                              //Scrie comanda
    dataport = 0x0E;                    //Clear LCD
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
    wrcomm();                              //Scrie comanda
    dataport = 0x01;                    //Cursor la linia 1, col 1
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	85 bb       	out	0x15, r24	; 21



unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 348:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 34a:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 34c:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 34e:	90 98       	cbi	0x12, 0	; 18
 350:	c9 01       	movw	r24, r18
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <LCD_init+0x48>
    wrcomm();                              //Scrie comanda
    dataport = 0x0C;                    //Setari cursor
    wrcomm();                              //Scrie comanda
    dataport = 0x01;                    //Cursor la linia 1, col 1
    wrcomm();                              //Scrie comanda
    dataport = 0x80;                   //Fara shift
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	85 bb       	out	0x15, r24	; 21



unsigned int wrcomm(void)
{
    commport &= ~(1 << rs);                            //Setting RS = 0, selecting command register
 35a:	92 98       	cbi	0x12, 2	; 18
    commport &= ~(1 << wr);                           //Setting RW = 0
 35c:	91 98       	cbi	0x12, 1	; 18
    commport |= (1 << en);                                //EN = 1
 35e:	90 9a       	sbi	0x12, 0	; 18
    commport &= ~(1 << en);                           //EN = 0, thus giving high to low pulse on Enable pin
 360:	90 98       	cbi	0x12, 0	; 18
 362:	c9 01       	movw	r24, r18
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_init+0x5a>
    dataport = 0x01;                    //Cursor la linia 1, col 1
    wrcomm();                              //Scrie comanda
    dataport = 0x80;                   //Fara shift
    wrcomm();                              //Scrie comanda
return 1;
}
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	08 95       	ret

0000036e <main>:
unsigned char l2[]="335  T=   .      ";		//Sir linia 2


int main(void)
{
	DDRA = 0x00;							 //PortA in
 36e:	1a ba       	out	0x1a, r1	; 26
    DDRC = 0xFF;                             //PortC out
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	84 bb       	out	0x14, r24	; 20
    DDRD = 0x07;                             //PortD 0, 1, 2 pin out
 374:	87 e0       	ldi	r24, 0x07	; 7
 376:	81 bb       	out	0x11, r24	; 17
	LCD_init(); 							 //Initializare LCD
 378:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_init>
	l1[14]=0xB2;							 //Caracter pt grade
 37c:	82 eb       	ldi	r24, 0xB2	; 178
 37e:	80 93 72 00 	sts	0x0072, r24

while(1)
{
		Temp();
 382:	0e 94 79 00 	call	0xf2	; 0xf2 <Temp>
		LCD_SendData();
 386:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_SendData>
 38a:	fb cf       	rjmp	.-10     	; 0x382 <main+0x14>

0000038c <__udivmodhi4>:
 38c:	aa 1b       	sub	r26, r26
 38e:	bb 1b       	sub	r27, r27
 390:	51 e1       	ldi	r21, 0x11	; 17
 392:	07 c0       	rjmp	.+14     	; 0x3a2 <__udivmodhi4_ep>

00000394 <__udivmodhi4_loop>:
 394:	aa 1f       	adc	r26, r26
 396:	bb 1f       	adc	r27, r27
 398:	a6 17       	cp	r26, r22
 39a:	b7 07       	cpc	r27, r23
 39c:	10 f0       	brcs	.+4      	; 0x3a2 <__udivmodhi4_ep>
 39e:	a6 1b       	sub	r26, r22
 3a0:	b7 0b       	sbc	r27, r23

000003a2 <__udivmodhi4_ep>:
 3a2:	88 1f       	adc	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	5a 95       	dec	r21
 3a8:	a9 f7       	brne	.-22     	; 0x394 <__udivmodhi4_loop>
 3aa:	80 95       	com	r24
 3ac:	90 95       	com	r25
 3ae:	bc 01       	movw	r22, r24
 3b0:	cd 01       	movw	r24, r26
 3b2:	08 95       	ret

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
