
work.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000504  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000504  00000578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d6  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007c0  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002ec  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008e6  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  00001a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000190  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000027e  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 44 01 	call	0x288	; 0x288 <main>
  7a:	0c 94 80 02 	jmp	0x500	; 0x500 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Mean>:
  }
}


unsigned int Mean(unsigned int n)		//achizitioneaza  6 esantioane la interval de 100ms, apoi face media aritmetica
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	48 2f       	mov	r20, r24
return val;

}

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  88:	87 b9       	out	0x07, r24	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  8a:	8e ec       	ldi	r24, 0xCE	; 206
  8c:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  8e:	34 9b       	sbis	0x06, 4	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <Mean+0xc>
  ADCSRA|=0x10;
  92:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  94:	c4 b1       	in	r28, 0x04	; 4
  96:	d5 b1       	in	r29, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  98:	88 ea       	ldi	r24, 0xA8	; 168
  9a:	91 e6       	ldi	r25, 0x61	; 97
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <Mean+0x1a>
return val;

}

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  a0:	47 b9       	out	0x07, r20	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  a2:	8e ec       	ldi	r24, 0xCE	; 206
  a4:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  a6:	34 9b       	sbis	0x06, 4	; 6
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <Mean+0x24>
  ADCSRA|=0x10;
  aa:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  ac:	24 b1       	in	r18, 0x04	; 4
  ae:	35 b1       	in	r19, 0x05	; 5
  b0:	88 ea       	ldi	r24, 0xA8	; 168
  b2:	91 e6       	ldi	r25, 0x61	; 97
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <Mean+0x32>
return val;

}

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  b8:	47 b9       	out	0x07, r20	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  ba:	8e ec       	ldi	r24, 0xCE	; 206
  bc:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  be:	34 9b       	sbis	0x06, 4	; 6
  c0:	fe cf       	rjmp	.-4      	; 0xbe <Mean+0x3c>
  ADCSRA|=0x10;
  c2:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  c4:	a4 b1       	in	r26, 0x04	; 4
  c6:	b5 b1       	in	r27, 0x05	; 5
return val;

}

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  c8:	47 b9       	out	0x07, r20	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  ca:	8e ec       	ldi	r24, 0xCE	; 206
  cc:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  ce:	34 9b       	sbis	0x06, 4	; 6
  d0:	fe cf       	rjmp	.-4      	; 0xce <Mean+0x4c>
  ADCSRA|=0x10;
  d2:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  d4:	e4 b1       	in	r30, 0x04	; 4
  d6:	f5 b1       	in	r31, 0x05	; 5
  d8:	88 ea       	ldi	r24, 0xA8	; 168
  da:	91 e6       	ldi	r25, 0x61	; 97
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <Mean+0x5a>
return val;

}

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  e0:	47 b9       	out	0x07, r20	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  e2:	8e ec       	ldi	r24, 0xCE	; 206
  e4:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  e6:	34 9b       	sbis	0x06, 4	; 6
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <Mean+0x64>
  ADCSRA|=0x10;
  ea:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
  ec:	64 b1       	in	r22, 0x04	; 4
  ee:	75 b1       	in	r23, 0x05	; 5
  f0:	88 ea       	ldi	r24, 0xA8	; 168
  f2:	91 e6       	ldi	r25, 0x61	; 97
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <Mean+0x72>
return val;

}

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
  f8:	47 b9       	out	0x07, r20	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
  fa:	8e ec       	ldi	r24, 0xCE	; 206
  fc:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
  fe:	34 9b       	sbis	0x06, 4	; 6
 100:	fe cf       	rjmp	.-4      	; 0xfe <Mean+0x7c>
  ADCSRA|=0x10;
 102:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 104:	84 b1       	in	r24, 0x04	; 4
 106:	95 b1       	in	r25, 0x05	; 5
_delay_ms(100);
v5=read_adc(n);
_delay_ms(100);
v6=read_adc(n);

val=(v1+v2+v3+v5+v6+v4)/6;
 108:	2c 0f       	add	r18, r28
 10a:	3d 1f       	adc	r19, r29
 10c:	2a 0f       	add	r18, r26
 10e:	3b 1f       	adc	r19, r27
 110:	2e 0f       	add	r18, r30
 112:	3f 1f       	adc	r19, r31
 114:	26 0f       	add	r18, r22
 116:	37 1f       	adc	r19, r23
 118:	82 0f       	add	r24, r18
 11a:	93 1f       	adc	r25, r19
 11c:	66 e0       	ldi	r22, 0x06	; 6
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__udivmodhi4>
 124:	21 e3       	ldi	r18, 0x31	; 49
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	a9 01       	movw	r20, r18
 12a:	64 9f       	mul	r22, r20
 12c:	90 01       	movw	r18, r0
 12e:	65 9f       	mul	r22, r21
 130:	30 0d       	add	r19, r0
 132:	74 9f       	mul	r23, r20
 134:	30 0d       	add	r19, r0
 136:	11 24       	eor	r1, r1
val=val*49;
//val=val/10;

return val;

}
 138:	c9 01       	movw	r24, r18
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <read_adc>:

unsigned int read_adc(unsigned int channel)
{	ADMUX=channel;
 140:	87 b9       	out	0x07, r24	; 7
  ADCSRA=( (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS2) );//Incepe conversia, Seteaza bitii de prescalare
 142:	8e ec       	ldi	r24, 0xCE	; 206
 144:	86 b9       	out	0x06, r24	; 6
  while(!(ADCSRA & 0x10)); //Asteapta sa termine conversia
 146:	34 9b       	sbis	0x06, 4	; 6
 148:	fe cf       	rjmp	.-4      	; 0x146 <read_adc+0x6>
  ADCSRA|=0x10;
 14a:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
 14c:	24 b1       	in	r18, 0x04	; 4
 14e:	35 b1       	in	r19, 0x05	; 5
}
 150:	c9 01       	movw	r24, r18
 152:	08 95       	ret

00000154 <Temp>:

unsigned int Temp(void)
{
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	2b 97       	sbiw	r28, 0x0b	; 11
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
unsigned int val,val2, i=3, j=4;
unsigned char t[]="   ",u[]="      ";
 168:	80 91 60 00 	lds	r24, 0x0060
 16c:	90 91 61 00 	lds	r25, 0x0061
 170:	a0 91 62 00 	lds	r26, 0x0062
 174:	b0 91 63 00 	lds	r27, 0x0063
 178:	89 83       	std	Y+1, r24	; 0x01
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	ab 83       	std	Y+3, r26	; 0x03
 17e:	bc 83       	std	Y+4, r27	; 0x04


val=Mean(temp);
 180:	83 e4       	ldi	r24, 0x43	; 67
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 41 00 	call	0x82	; 0x82 <Mean>
 188:	9c 01       	movw	r18, r24
 18a:	fe 01       	movw	r30, r28
 18c:	34 96       	adiw	r30, 0x04	; 4
 18e:	0d c0       	rjmp	.+26     	; 0x1aa <Temp+0x56>
while(val)				//separa cifrele si le salveaza in sirul t
	{
	t[i]=val%10;
 190:	c9 01       	movw	r24, r18
 192:	6a e0       	ldi	r22, 0x0A	; 10
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__udivmodhi4>
 19a:	80 83       	st	Z, r24
	val=val/10;
 19c:	c9 01       	movw	r24, r18
 19e:	6a e0       	ldi	r22, 0x0A	; 10
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__udivmodhi4>
 1a6:	9b 01       	movw	r18, r22
 1a8:	31 97       	sbiw	r30, 0x01	; 1
unsigned int val,val2, i=3, j=4;
unsigned char t[]="   ",u[]="      ";


val=Mean(temp);
while(val)				//separa cifrele si le salveaza in sirul t
 1aa:	21 15       	cp	r18, r1
 1ac:	31 05       	cpc	r19, r1
 1ae:	81 f7       	brne	.-32     	; 0x190 <Temp+0x3c>
	t[i]=val%10;
	val=val/10;
	i--;
	}

l1[11]=48+t[0];			//cifra zecilor pe pozitia 10 de pe LCD
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	80 5d       	subi	r24, 0xD0	; 208
 1b4:	80 93 76 00 	sts	0x0076, r24
if(l1[11]==0x50)		//ascunde primul 0
 1b8:	80 35       	cpi	r24, 0x50	; 80
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <Temp+0x6e>
{
	l1[11]=0x20;			//0x20 ascii = " "
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	80 93 76 00 	sts	0x0076, r24
}

l1[12]=48+t[1];			//cifra unitatilor pe pozitia 11
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	80 5d       	subi	r24, 0xD0	; 208
 1c6:	80 93 77 00 	sts	0x0077, r24
if(l1[12]==0x50)
 1ca:	80 35       	cpi	r24, 0x50	; 80
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <Temp+0x80>
{
	l1[12]=0x30;
 1ce:	80 e3       	ldi	r24, 0x30	; 48
 1d0:	80 93 77 00 	sts	0x0077, r24
}

l1[14]=48+t[2];			//prima zecimala pe pozitia 13
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	80 5d       	subi	r24, 0xD0	; 208
 1d8:	80 93 79 00 	sts	0x0079, r24
if(l1[14]==0x50)
 1dc:	80 35       	cpi	r24, 0x50	; 80
 1de:	19 f4       	brne	.+6      	; 0x1e6 <Temp+0x92>
{
	l1[14]=0x30;
 1e0:	80 e3       	ldi	r24, 0x30	; 48
 1e2:	80 93 79 00 	sts	0x0079, r24
}




val2=Mean(temp2);
 1e6:	81 e4       	ldi	r24, 0x41	; 65
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 41 00 	call	0x82	; 0x82 <Mean>
if (val2>=27310)
 1ee:	2a e6       	ldi	r18, 0x6A	; 106
 1f0:	8e 3a       	cpi	r24, 0xAE	; 174
 1f2:	92 07       	cpc	r25, r18
 1f4:	90 f0       	brcs	.+36     	; 0x21a <Temp+0xc6>
{
	val2=val2-27310;
 1f6:	9c 01       	movw	r18, r24
 1f8:	2e 5a       	subi	r18, 0xAE	; 174
 1fa:	3a 46       	sbci	r19, 0x6A	; 106
	l1[1]=0x20; 
 1fc:	80 e2       	ldi	r24, 0x20	; 32
 1fe:	80 93 6c 00 	sts	0x006C, r24
}

unsigned int Temp(void)
{
unsigned int val,val2, i=3, j=4;
unsigned char t[]="   ",u[]="      ";
 202:	de 01       	movw	r26, r28
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	e4 e6       	ldi	r30, 0x64	; 100
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	01 90       	ld	r0, Z+
 20e:	0d 92       	st	X+, r0
 210:	81 50       	subi	r24, 0x01	; 1
 212:	e1 f7       	brne	.-8      	; 0x20c <Temp+0xb8>
 214:	fe 01       	movw	r30, r28
 216:	39 96       	adiw	r30, 0x09	; 9
 218:	13 c0       	rjmp	.+38     	; 0x240 <Temp+0xec>
	val2=val2-27310;
	l1[1]=0x20; 
}
else
{
	val2=27310-val2;
 21a:	2e ea       	ldi	r18, 0xAE	; 174
 21c:	3a e6       	ldi	r19, 0x6A	; 106
 21e:	28 1b       	sub	r18, r24
 220:	39 0b       	sbc	r19, r25
	l1[1]=0x2D;
 222:	8d e2       	ldi	r24, 0x2D	; 45
 224:	ec cf       	rjmp	.-40     	; 0x1fe <Temp+0xaa>
}
while(val2)				//separa cifrele si le salveaza in sirul t
	{
	u[j]=val2%10;
 226:	c9 01       	movw	r24, r18
 228:	6a e0       	ldi	r22, 0x0A	; 10
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__udivmodhi4>
 230:	80 83       	st	Z, r24
	val2=val2/10;
 232:	c9 01       	movw	r24, r18
 234:	6a e0       	ldi	r22, 0x0A	; 10
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__udivmodhi4>
 23c:	9b 01       	movw	r18, r22
 23e:	31 97       	sbiw	r30, 0x01	; 1
else
{
	val2=27310-val2;
	l1[1]=0x2D;
}
while(val2)				//separa cifrele si le salveaza in sirul t
 240:	21 15       	cp	r18, r1
 242:	31 05       	cpc	r19, r1
 244:	81 f7       	brne	.-32     	; 0x226 <Temp+0xd2>
	u[j]=val2%10;
	val2=val2/10;
	j--;
	}

l1[2]=48+u[1];			//cifra zecilor pe pozitia 10 de pe LCD
 246:	8e 81       	ldd	r24, Y+6	; 0x06
 248:	80 5d       	subi	r24, 0xD0	; 208
 24a:	80 93 6d 00 	sts	0x006D, r24
if(l1[2]==0x50)		//ascunde primul 0
 24e:	80 35       	cpi	r24, 0x50	; 80
 250:	19 f4       	brne	.+6      	; 0x258 <Temp+0x104>
{
	l1[2]=0x20;			//0x20 ascii = " "
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	80 93 6d 00 	sts	0x006D, r24
}

l1[3]=48+u[2];			//cifra zecilor pe pozitia 10 de pe LCD
 258:	8f 81       	ldd	r24, Y+7	; 0x07
 25a:	80 5d       	subi	r24, 0xD0	; 208
 25c:	80 93 6e 00 	sts	0x006E, r24
if(l1[3]==0x50)		//ascunde primul 0
 260:	80 35       	cpi	r24, 0x50	; 80
 262:	19 f4       	brne	.+6      	; 0x26a <Temp+0x116>
{
	l1[3]=0x30;			//0x20 ascii = " "
 264:	80 e3       	ldi	r24, 0x30	; 48
 266:	80 93 6e 00 	sts	0x006E, r24
}


l1[5]=48+u[3];			//cifra zecilor pe pozitia 10 de pe LCD
 26a:	88 85       	ldd	r24, Y+8	; 0x08
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	80 93 70 00 	sts	0x0070, r24
//l1[6]=48+u[4];			//cifra zecilor pe pozitia 10 de pe LCD

return 1;
}
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	2b 96       	adiw	r28, 0x0b	; 11
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61
 282:	cf 91       	pop	r28
 284:	df 91       	pop	r29
 286:	08 95       	ret

00000288 <main>:
char l1[16]="I   .    E   .   ", l2[16]="     XX.XXV     ";

void main (void)
{

DDRA = 0x00;
 288:	1a ba       	out	0x1a, r1	; 26
l1[6]=0xB2;							 //Caracter pt grade
 28a:	82 eb       	ldi	r24, 0xB2	; 178
 28c:	80 93 71 00 	sts	0x0071, r24
	l1[15]=0xB2;
 290:	80 93 7a 00 	sts	0x007A, r24
	lcd_init();
 294:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lcd_init>
  lcd_clrscr();
 298:	0e 94 ce 01 	call	0x39c	; 0x39c <lcd_clrscr>
  while (1)
  {Temp();
 29c:	0e 94 aa 00 	call	0x154	; 0x154 <Temp>
  lcd_goto(0x00);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_goto>
  lcd_puts(l1);
 2a6:	8b e6       	ldi	r24, 0x6B	; 107
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_puts>
  lcd_goto(0x40);
 2ae:	80 e4       	ldi	r24, 0x40	; 64
 2b0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_goto>
  lcd_puts(l2);
 2b4:	8b e7       	ldi	r24, 0x7B	; 123
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_puts>
 2bc:	ef cf       	rjmp	.-34     	; 0x29c <main+0x14>

000002be <lcd_write>:
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
 2be:	66 23       	and	r22, r22
 2c0:	11 f0       	breq	.+4      	; 0x2c6 <lcd_write+0x8>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
 2c2:	92 9a       	sbi	0x12, 2	; 18
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <lcd_write+0xa>
        PrevCmdInvolvedAddressCounter=1;
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
 2c6:	92 98       	cbi	0x12, 2	; 18
        PrevCmdInvolvedAddressCounter=0;
        #endif
      }

    #if LCD_BITS==4
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 2c8:	87 ff       	sbrs	r24, 7
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <lcd_write+0x12>
 2cc:	af 9a       	sbi	0x15, 7	; 21
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <lcd_write+0x14>
 2d0:	af 98       	cbi	0x15, 7	; 21
      lcd_db6_port_set(data&_BV(6));
 2d2:	98 2f       	mov	r25, r24
 2d4:	86 ff       	sbrs	r24, 6
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <lcd_write+0x1e>
 2d8:	ae 9a       	sbi	0x15, 6	; 21
 2da:	01 c0       	rjmp	.+2      	; 0x2de <lcd_write+0x20>
 2dc:	ae 98       	cbi	0x15, 6	; 21
      lcd_db5_port_set(data&_BV(5));
 2de:	95 ff       	sbrs	r25, 5
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <lcd_write+0x28>
 2e2:	ad 9a       	sbi	0x15, 5	; 21
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <lcd_write+0x2a>
 2e6:	ad 98       	cbi	0x15, 5	; 21
      lcd_db4_port_set(data&_BV(4));
 2e8:	94 ff       	sbrs	r25, 4
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <lcd_write+0x32>
 2ec:	ac 9a       	sbi	0x15, 4	; 21
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <lcd_write+0x34>
 2f0:	ac 98       	cbi	0x15, 4	; 21

      Delay_ns(100);
 2f2:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 2f4:	90 9a       	sbi	0x12, 0	; 18
      lcd_db4_port_set(data&_BV(4));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
 2f6:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 2f8:	90 98       	cbi	0x12, 0	; 18
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 2fa:	93 ff       	sbrs	r25, 3
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <lcd_write+0x44>
 2fe:	af 9a       	sbi	0x15, 7	; 21
 300:	01 c0       	rjmp	.+2      	; 0x304 <lcd_write+0x46>
 302:	af 98       	cbi	0x15, 7	; 21
      lcd_db6_port_set(data&_BV(2));
 304:	92 ff       	sbrs	r25, 2
 306:	02 c0       	rjmp	.+4      	; 0x30c <lcd_write+0x4e>
 308:	ae 9a       	sbi	0x15, 6	; 21
 30a:	01 c0       	rjmp	.+2      	; 0x30e <lcd_write+0x50>
 30c:	ae 98       	cbi	0x15, 6	; 21
      lcd_db5_port_set(data&_BV(1));
 30e:	91 ff       	sbrs	r25, 1
 310:	02 c0       	rjmp	.+4      	; 0x316 <lcd_write+0x58>
 312:	ad 9a       	sbi	0x15, 5	; 21
 314:	01 c0       	rjmp	.+2      	; 0x318 <lcd_write+0x5a>
 316:	ad 98       	cbi	0x15, 5	; 21
      lcd_db4_port_set(data&_BV(0));
 318:	90 ff       	sbrs	r25, 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <lcd_write+0x62>
 31c:	ac 9a       	sbi	0x15, 4	; 21
 31e:	01 c0       	rjmp	.+2      	; 0x322 <lcd_write+0x64>
 320:	ac 98       	cbi	0x15, 4	; 21

      Delay_ns(100);
 322:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 324:	90 9a       	sbi	0x12, 0	; 18
      lcd_db4_port_set(data&_BV(0));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
 326:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 328:	90 98       	cbi	0x12, 0	; 18
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
 32a:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
 32c:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
 32e:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
 330:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 332:	66 23       	and	r22, r22
 334:	41 f4       	brne	.+16     	; 0x346 <lcd_write+0x88>
 336:	84 30       	cpi	r24, 0x04	; 4
 338:	30 f4       	brcc	.+12     	; 0x346 <lcd_write+0x88>
        Delay_us(1640);
 33a:	89 e9       	ldi	r24, 0x99	; 153
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <lcd_write+0x80>
 342:	00 c0       	rjmp	.+0      	; 0x344 <lcd_write+0x86>
 344:	03 c0       	rjmp	.+6      	; 0x34c <lcd_write+0x8e>
      else Delay_us(40);
 346:	9d e0       	ldi	r25, 0x0D	; 13
 348:	9a 95       	dec	r25
 34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_write+0x8a>
 34c:	00 00       	nop
 34e:	08 95       	ret

00000350 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_write>
  }
 356:	08 95       	ret

00000358 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	ec 01       	movw	r28, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <lcd_puts_P+0xc>
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
      lcd_putc(c);
 360:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_putc>
 364:	fe 01       	movw	r30, r28
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
 366:	21 96       	adiw	r28, 0x01	; 1
 368:	84 91       	lpm	r24, Z+
 36a:	88 23       	and	r24, r24
 36c:	c9 f7       	brne	.-14     	; 0x360 <lcd_puts_P+0x8>
      lcd_putc(c);
  }
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
 37a:	02 c0       	rjmp	.+4      	; 0x380 <lcd_puts+0xc>
    register char c;

    while ((c=*s++)) 
      lcd_putc(c);
 37c:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_putc>
*************************************************************************/
void lcd_puts(const char *s)
  {
    register char c;

    while ((c=*s++)) 
 380:	89 91       	ld	r24, Y+
 382:	88 23       	and	r24, r24
 384:	d9 f7       	brne	.-10     	; 0x37c <lcd_puts+0x8>
      lcd_putc(c);
  }
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_write>
  }
 392:	08 95       	ret

00000394 <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_command>
  }
 39a:	08 95       	ret

0000039c <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_command>
  }
 3a2:	08 95       	ret

000003a4 <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
 3a4:	80 58       	subi	r24, 0x80	; 128
 3a6:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_command>
  }
 3aa:	08 95       	ret

000003ac <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 3ac:	88 9a       	sbi	0x11, 0	; 17
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 3ae:	8a 9a       	sbi	0x11, 2	; 17
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
 3b0:	89 9a       	sbi	0x11, 1	; 17
    #endif
    lcd_db7_ddr_high();
 3b2:	a7 9a       	sbi	0x14, 7	; 20
    lcd_db6_ddr_high();
 3b4:	a6 9a       	sbi	0x14, 6	; 20
    lcd_db5_ddr_high();
 3b6:	a5 9a       	sbi	0x14, 5	; 20
    lcd_db4_ddr_high();
 3b8:	a4 9a       	sbi	0x14, 4	; 20
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 3ba:	90 98       	cbi	0x12, 0	; 18
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
 3bc:	92 98       	cbi	0x12, 2	; 18
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
 3be:	91 98       	cbi	0x12, 1	; 18
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 3c0:	af 9a       	sbi	0x15, 7	; 21
    lcd_db6_port_high();
 3c2:	ae 9a       	sbi	0x15, 6	; 21
    lcd_db5_port_high();
 3c4:	ad 9a       	sbi	0x15, 5	; 21
    lcd_db4_port_high();
 3c6:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 3c8:	85 ea       	ldi	r24, 0xA5	; 165
 3ca:	9e e0       	ldi	r25, 0x0E	; 14
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_init+0x20>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_init+0x26>
 3d2:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 3d4:	af 98       	cbi	0x15, 7	; 21
    lcd_db6_port_low();
 3d6:	ae 98       	cbi	0x15, 6	; 21
    Delay_ns(100);
 3d8:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 3da:	90 9a       	sbi	0x12, 0	; 18
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
 3dc:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 3de:	90 98       	cbi	0x12, 0	; 18
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(4100);
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	94 e0       	ldi	r25, 0x04	; 4
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_init+0x38>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <lcd_init+0x3e>
 3ea:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 3ec:	90 9a       	sbi	0x12, 0	; 18
    lcd_e_port_low();

    Delay_us(4100);

    lcd_e_port_high();
    Delay_ns(500);
 3ee:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 3f0:	90 98       	cbi	0x12, 0	; 18

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(100);
 3f2:	91 e2       	ldi	r25, 0x21	; 33
 3f4:	9a 95       	dec	r25
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <lcd_init+0x48>
 3f8:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 3fa:	90 9a       	sbi	0x12, 0	; 18
    lcd_e_port_low();

    Delay_us(100);

    lcd_e_port_high();
    Delay_ns(500);
 3fc:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 3fe:	90 98       	cbi	0x12, 0	; 18

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(40);
 400:	8d e0       	ldi	r24, 0x0D	; 13
 402:	8a 95       	dec	r24
 404:	f1 f7       	brne	.-4      	; 0x402 <lcd_init+0x56>
 406:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
 408:	ac 98       	cbi	0x15, 4	; 21
      Delay_ns(100);
 40a:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 40c:	90 9a       	sbi	0x12, 0	; 18
    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 40e:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 410:	90 98       	cbi	0x12, 0	; 18
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 412:	9d e0       	ldi	r25, 0x0D	; 13
 414:	9a 95       	dec	r25
 416:	f1 f7       	brne	.-4      	; 0x414 <lcd_init+0x68>
 418:	00 00       	nop

      lcd_db4_port_low();
 41a:	ac 98       	cbi	0x15, 4	; 21
      Delay_ns(100);
 41c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 41e:	90 9a       	sbi	0x12, 0	; 18
      Delay_us(40);

      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 420:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 422:	90 98       	cbi	0x12, 0	; 18
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_ns(500);
 424:	00 00       	nop

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
 426:	af 9a       	sbi	0x15, 7	; 21
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
 428:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 42a:	90 9a       	sbi	0x12, 0	; 18
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 42c:	00 00       	nop
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 42e:	90 98       	cbi	0x12, 0	; 18

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 430:	8d e0       	ldi	r24, 0x0D	; 13
 432:	8a 95       	dec	r24
 434:	f1 f7       	brne	.-4      	; 0x432 <lcd_init+0x86>
 436:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 438:	88 e0       	ldi	r24, 0x08	; 8
 43a:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_command>

    //Display Clear
    lcd_clrscr();
 43e:	0e 94 ce 01 	call	0x39c	; 0x39c <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 442:	86 e0       	ldi	r24, 0x06	; 6
 444:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 448:	8c e0       	ldi	r24, 0x0C	; 12
 44a:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_command>
  }
 44e:	08 95       	ret

00000450 <lcd_getc>:
        }
    #endif

    if (rs)
      {
        lcd_rs_port_high();                             // RS=1: Read Data
 450:	92 9a       	sbi	0x12, 2	; 18
        #endif
      }
    else lcd_rs_port_low();                           // RS=0: Read Busy Flag

    
    lcd_rw_port_high();                               // RW=1: Read Mode
 452:	91 9a       	sbi	0x12, 1	; 18

    #if LCD_BITS==4
      lcd_db7_ddr_low();                              // Configure Data Pins as Input
 454:	a7 98       	cbi	0x14, 7	; 20
      lcd_db6_ddr_low();
 456:	a6 98       	cbi	0x14, 6	; 20
      lcd_db5_ddr_low();
 458:	a5 98       	cbi	0x14, 5	; 20
      lcd_db4_ddr_low();
 45a:	a4 98       	cbi	0x14, 4	; 20
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 45c:	90 9a       	sbi	0x12, 0	; 18
      lcd_db6_ddr_low();
      lcd_db5_ddr_low();
      lcd_db4_ddr_low();

      lcd_e_port_high();                              // Read High Nibble First
      Delay_ns(500);
 45e:	00 00       	nop

      data=lcd_db4_pin_get() << 4 | lcd_db5_pin_get() << 5 |
 460:	43 b3       	in	r20, 0x13	; 19
 462:	33 b3       	in	r19, 0x13	; 19
 464:	53 b3       	in	r21, 0x13	; 19
 466:	63 b3       	in	r22, 0x13	; 19
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 468:	90 98       	cbi	0x12, 0	; 18

      data=lcd_db4_pin_get() << 4 | lcd_db5_pin_get() << 5 |
           lcd_db6_pin_get() << 6 | lcd_db7_pin_get() << 7;

      lcd_e_port_low();
      Delay_ns(500);
 46a:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 46c:	90 9a       	sbi	0x12, 0	; 18

      lcd_e_port_low();
      Delay_ns(500);

      lcd_e_port_high();                              // Read Low Nibble
      Delay_ns(500);
 46e:	00 00       	nop

      data|=lcd_db4_pin_get() << 0 | lcd_db5_pin_get() << 1 |
 470:	83 b3       	in	r24, 0x13	; 19
 472:	9d 99       	sbic	0x13, 5	; 19
 474:	02 c0       	rjmp	.+4      	; 0x47a <__stack+0x1b>
 476:	e0 e0       	ldi	r30, 0x00	; 0
 478:	01 c0       	rjmp	.+2      	; 0x47c <__stack+0x1d>
 47a:	e2 e0       	ldi	r30, 0x02	; 2
 47c:	9e 99       	sbic	0x13, 6	; 19
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__stack+0x25>
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	01 c0       	rjmp	.+2      	; 0x486 <__stack+0x27>
 484:	74 e0       	ldi	r23, 0x04	; 4
 486:	23 b3       	in	r18, 0x13	; 19
 488:	22 1f       	adc	r18, r18
 48a:	22 27       	eor	r18, r18
 48c:	22 1f       	adc	r18, r18
 48e:	22 0f       	add	r18, r18
 490:	22 0f       	add	r18, r18
 492:	22 0f       	add	r18, r18
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 494:	90 98       	cbi	0x12, 0	; 18
      data|=lcd_db4_pin_get() << 0 | lcd_db5_pin_get() << 1 |
            lcd_db6_pin_get() << 2 | lcd_db7_pin_get() << 3;

      lcd_e_port_low();

      lcd_db7_ddr_high();                             // Configure Data Pins as Output
 496:	a7 9a       	sbi	0x14, 7	; 20
      lcd_db6_ddr_high();
 498:	a6 9a       	sbi	0x14, 6	; 20
      lcd_db5_ddr_high();
 49a:	a5 9a       	sbi	0x14, 5	; 20
      lcd_db4_ddr_high();
 49c:	a4 9a       	sbi	0x14, 4	; 20

      lcd_db7_port_high();                            // Pins High (Inactive)
 49e:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
 4a0:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
 4a2:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
 4a4:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db2_port_high();
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif
    
    lcd_rw_port_low();
 4a6:	91 98       	cbi	0x12, 1	; 18

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
    if (rs)
      Delay_us(40);
 4a8:	9d e0       	ldi	r25, 0x0D	; 13
 4aa:	9a 95       	dec	r25
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <__stack+0x4b>
 4ae:	00 00       	nop
 4b0:	30 72       	andi	r19, 0x20	; 32
 4b2:	40 71       	andi	r20, 0x10	; 16
 4b4:	34 2b       	or	r19, r20
 4b6:	50 74       	andi	r21, 0x40	; 64
 4b8:	35 2b       	or	r19, r21
 4ba:	60 78       	andi	r22, 0x80	; 128
 4bc:	36 2b       	or	r19, r22
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	44 e0       	ldi	r20, 0x04	; 4
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	4a 95       	dec	r20
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <__stack+0x63>
 4ca:	81 70       	andi	r24, 0x01	; 1
 4cc:	38 2b       	or	r19, r24
 4ce:	3e 2b       	or	r19, r30
 4d0:	37 2b       	or	r19, r23
  }

uint8_t lcd_getc()
  {
    return lcd_read(1);
  }
 4d2:	83 2f       	mov	r24, r19
 4d4:	82 2b       	or	r24, r18
 4d6:	08 95       	ret

000004d8 <__udivmodhi4>:
 4d8:	aa 1b       	sub	r26, r26
 4da:	bb 1b       	sub	r27, r27
 4dc:	51 e1       	ldi	r21, 0x11	; 17
 4de:	07 c0       	rjmp	.+14     	; 0x4ee <__udivmodhi4_ep>

000004e0 <__udivmodhi4_loop>:
 4e0:	aa 1f       	adc	r26, r26
 4e2:	bb 1f       	adc	r27, r27
 4e4:	a6 17       	cp	r26, r22
 4e6:	b7 07       	cpc	r27, r23
 4e8:	10 f0       	brcs	.+4      	; 0x4ee <__udivmodhi4_ep>
 4ea:	a6 1b       	sub	r26, r22
 4ec:	b7 0b       	sbc	r27, r23

000004ee <__udivmodhi4_ep>:
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	5a 95       	dec	r21
 4f4:	a9 f7       	brne	.-22     	; 0x4e0 <__udivmodhi4_loop>
 4f6:	80 95       	com	r24
 4f8:	90 95       	com	r25
 4fa:	bc 01       	movw	r22, r24
 4fc:	cd 01       	movw	r24, r26
 4fe:	08 95       	ret

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
